generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  email                  String            @unique
  firstname              String?
  username               String?           @unique
  address                String?
  city                   String?
  state                  String?
  postalCode             String?
  phoneNumber            String?
  dateOfBirth            String?
  identification         String?
  employerName           String?
  jobTitle               String?
  income                 String?
  bankAccount            String?
  creditScore            String?
  socialMedia            String?
  emergencyContactName   String?
  emergencyContactNumber String?
  preferences            String?
  loans                  Loan[]            @relation("Loaner")
  loansTaken             Loan[]            @relation("Loanee")
  mappedUserRoles        MappedUserRoles[] @relation("UserRoles")
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deleted                Boolean           @default(false)
  userRole               String?
  password               String?
  companyId              String?           @db.ObjectId
  company                Company?          @relation("CompanyUsers", fields: [companyId], references: [id])
}

model Loan {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  lenderId           String              @db.ObjectId
  borrowerId         String              @db.ObjectId
  amount             String?
  interestRate       String?
  duration           Int?
  startDate          DateTime?
  endDate            DateTime?
  status             String?
  collateral         String?
  repaymentSchedule  String?
  latePaymentPenalty Float?
  comments           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deleted            Boolean             @default(false)
  lender             User                @relation("Loaner", fields: [lenderId], references: [id])
  borrower           User                @relation("Loanee", fields: [borrowerId], references: [id])
  documents          Document[]          @relation("LoanDocuments")
  repaymentSchedules RepaymentSchedule[]

  repaymentScheduleId String @db.ObjectId
}

model Document {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileType  String // Type of the document (e.g., ID, proof of income)
  fileName  String // Original name of the uploaded file
  filePath  String // Path to the stored file
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loanId    String   @db.ObjectId
  loan      Loan     @relation("LoanDocuments", fields: [loanId], references: [id])
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String?
  city        String?
  state       String?
  postalCode  String?
  phoneNumber String?
  email       String   @unique
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted     Boolean  @default(false)
  users       User[]   @relation("CompanyUsers")
}

model RepaymentSchedule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  loanId      String   @db.ObjectId
  paymentDate DateTime
  amountDue   Float
  amountPaid  Float    @default(0)
  status      String // e.g., PENDING, PAID, LATE
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  loan        Loan?    @relation(fields: [loanId], references: [id])
}

model UserRole {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            Role
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         Boolean           @default(false)
  mappedUserRoles MappedUserRoles[] @relation("RoleMappings")
}

model MappedUserRoles {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  roleId    String   @db.ObjectId
  user      User     @relation("UserRoles", fields: [userId], references: [id])
  role      UserRole @relation("RoleMappings", fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

enum Role {
  LENDER
  ADMIN
  BORROWER
}
