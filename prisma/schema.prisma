generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Loan {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  lenderId           String   @db.ObjectId
  borrowerId         String   @db.ObjectId
  amount             Float
  interestRate       Float
  startDate          DateTime
  endDate            DateTime
  status             String // e.g., 'pending', 'approved', 'repaid', 'defaulted'
  totalRepayment     Float   // New field to store total repayment amount
  comments           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deleted            Boolean  @default(false)
  lender             Lender   @relation(fields: [lenderId], references: [id])
  borrower           Borrower @relation(fields: [borrowerId], references: [id])
}


model Lender {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId String?   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loans     Loan[]   @relation
  company   Company?  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Borrower {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  loans     Loan[]     @relation
  user      User       @relation(fields: [userId], references: [id])
  documents Document[] @relation("LoanDocuments")
}

model Company {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  address             String
  city                String
  region              String
  registrationNumber String
  phoneNumber         String
  email               String
  postalCode          String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lenders             Lender[] @relation
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  username  String     @unique
  firstName String?
  lastName  String?
  email     String     @unique
  password  String
  role      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  companyId String?    @db.ObjectId
  lenders   Lender[]   @relation
  borrowers Borrower[] @relation
  Document  Document[]

  ResetTokens ResetTokens[]
}

model Document {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  name       String
  url        String
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  borrower   Borrower? @relation("LoanDocuments", fields: [borrowerId], references: [id])
  borrowerId String?   @db.ObjectId
}

model ResetTokens {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  resetToken String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deleted    Boolean  @default(false)
}

enum Role {
  LENDER
  ADMIN
  BORROWER
}
