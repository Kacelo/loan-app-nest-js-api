
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Loan
 * 
 */
export type Loan = $Result.DefaultSelection<Prisma.$LoanPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model RepaymentSchedule
 * 
 */
export type RepaymentSchedule = $Result.DefaultSelection<Prisma.$RepaymentSchedulePayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model MappedUserRoles
 * 
 */
export type MappedUserRoles = $Result.DefaultSelection<Prisma.$MappedUserRolesPayload>
/**
 * Model ResetTokens
 * 
 */
export type ResetTokens = $Result.DefaultSelection<Prisma.$ResetTokensPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  LENDER: 'LENDER',
  ADMIN: 'ADMIN',
  BORROWER: 'BORROWER'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.loan`: Exposes CRUD operations for the **Loan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loans
    * const loans = await prisma.loan.findMany()
    * ```
    */
  get loan(): Prisma.LoanDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.repaymentSchedule`: Exposes CRUD operations for the **RepaymentSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RepaymentSchedules
    * const repaymentSchedules = await prisma.repaymentSchedule.findMany()
    * ```
    */
  get repaymentSchedule(): Prisma.RepaymentScheduleDelegate<ExtArgs>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs>;

  /**
   * `prisma.mappedUserRoles`: Exposes CRUD operations for the **MappedUserRoles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MappedUserRoles
    * const mappedUserRoles = await prisma.mappedUserRoles.findMany()
    * ```
    */
  get mappedUserRoles(): Prisma.MappedUserRolesDelegate<ExtArgs>;

  /**
   * `prisma.resetTokens`: Exposes CRUD operations for the **ResetTokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResetTokens
    * const resetTokens = await prisma.resetTokens.findMany()
    * ```
    */
  get resetTokens(): Prisma.ResetTokensDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Loan: 'Loan',
    Document: 'Document',
    Company: 'Company',
    RepaymentSchedule: 'RepaymentSchedule',
    UserRole: 'UserRole',
    MappedUserRoles: 'MappedUserRoles',
    ResetTokens: 'ResetTokens'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'loan' | 'document' | 'company' | 'repaymentSchedule' | 'userRole' | 'mappedUserRoles' | 'resetTokens'
      txIsolationLevel: never
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Loan: {
        payload: Prisma.$LoanPayload<ExtArgs>
        fields: Prisma.LoanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          findFirst: {
            args: Prisma.LoanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          findMany: {
            args: Prisma.LoanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>[]
          }
          create: {
            args: Prisma.LoanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          createMany: {
            args: Prisma.LoanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LoanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          update: {
            args: Prisma.LoanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          deleteMany: {
            args: Prisma.LoanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LoanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LoanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          aggregate: {
            args: Prisma.LoanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLoan>
          }
          groupBy: {
            args: Prisma.LoanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LoanGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.LoanFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.LoanAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.LoanCountArgs<ExtArgs>,
            result: $Utils.Optional<LoanCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DocumentFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.DocumentAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>,
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CompanyFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.CompanyAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>,
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      RepaymentSchedule: {
        payload: Prisma.$RepaymentSchedulePayload<ExtArgs>
        fields: Prisma.RepaymentScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepaymentScheduleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepaymentScheduleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload>
          }
          findFirst: {
            args: Prisma.RepaymentScheduleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepaymentScheduleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload>
          }
          findMany: {
            args: Prisma.RepaymentScheduleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload>[]
          }
          create: {
            args: Prisma.RepaymentScheduleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload>
          }
          createMany: {
            args: Prisma.RepaymentScheduleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RepaymentScheduleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload>
          }
          update: {
            args: Prisma.RepaymentScheduleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload>
          }
          deleteMany: {
            args: Prisma.RepaymentScheduleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RepaymentScheduleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RepaymentScheduleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepaymentSchedulePayload>
          }
          aggregate: {
            args: Prisma.RepaymentScheduleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRepaymentSchedule>
          }
          groupBy: {
            args: Prisma.RepaymentScheduleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RepaymentScheduleGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RepaymentScheduleFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.RepaymentScheduleAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.RepaymentScheduleCountArgs<ExtArgs>,
            result: $Utils.Optional<RepaymentScheduleCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserRoleFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserRoleAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>,
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      MappedUserRoles: {
        payload: Prisma.$MappedUserRolesPayload<ExtArgs>
        fields: Prisma.MappedUserRolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MappedUserRolesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MappedUserRolesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload>
          }
          findFirst: {
            args: Prisma.MappedUserRolesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MappedUserRolesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload>
          }
          findMany: {
            args: Prisma.MappedUserRolesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload>[]
          }
          create: {
            args: Prisma.MappedUserRolesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload>
          }
          createMany: {
            args: Prisma.MappedUserRolesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MappedUserRolesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload>
          }
          update: {
            args: Prisma.MappedUserRolesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload>
          }
          deleteMany: {
            args: Prisma.MappedUserRolesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MappedUserRolesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MappedUserRolesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MappedUserRolesPayload>
          }
          aggregate: {
            args: Prisma.MappedUserRolesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMappedUserRoles>
          }
          groupBy: {
            args: Prisma.MappedUserRolesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MappedUserRolesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MappedUserRolesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.MappedUserRolesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.MappedUserRolesCountArgs<ExtArgs>,
            result: $Utils.Optional<MappedUserRolesCountAggregateOutputType> | number
          }
        }
      }
      ResetTokens: {
        payload: Prisma.$ResetTokensPayload<ExtArgs>
        fields: Prisma.ResetTokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResetTokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResetTokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          findFirst: {
            args: Prisma.ResetTokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResetTokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          findMany: {
            args: Prisma.ResetTokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>[]
          }
          create: {
            args: Prisma.ResetTokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          createMany: {
            args: Prisma.ResetTokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResetTokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          update: {
            args: Prisma.ResetTokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          deleteMany: {
            args: Prisma.ResetTokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResetTokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResetTokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResetTokensPayload>
          }
          aggregate: {
            args: Prisma.ResetTokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResetTokens>
          }
          groupBy: {
            args: Prisma.ResetTokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResetTokensGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ResetTokensFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ResetTokensAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ResetTokensCountArgs<ExtArgs>,
            result: $Utils.Optional<ResetTokensCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    loans: number
    loansTaken: number
    mappedUserRoles: number
    ResetTokens: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loans?: boolean | UserCountOutputTypeCountLoansArgs
    loansTaken?: boolean | UserCountOutputTypeCountLoansTakenArgs
    mappedUserRoles?: boolean | UserCountOutputTypeCountMappedUserRolesArgs
    ResetTokens?: boolean | UserCountOutputTypeCountResetTokensArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoansTakenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMappedUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MappedUserRolesWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResetTokensWhereInput
  }


  /**
   * Count Type LoanCountOutputType
   */

  export type LoanCountOutputType = {
    documents: number
    repaymentSchedules: number
  }

  export type LoanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | LoanCountOutputTypeCountDocumentsArgs
    repaymentSchedules?: boolean | LoanCountOutputTypeCountRepaymentSchedulesArgs
  }

  // Custom InputTypes
  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoanCountOutputType
     */
    select?: LoanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * LoanCountOutputType without action
   */
  export type LoanCountOutputTypeCountRepaymentSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentScheduleWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    users: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | CompanyCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserRoleCountOutputType
   */

  export type UserRoleCountOutputType = {
    mappedUserRoles: number
  }

  export type UserRoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mappedUserRoles?: boolean | UserRoleCountOutputTypeCountMappedUserRolesArgs
  }

  // Custom InputTypes
  /**
   * UserRoleCountOutputType without action
   */
  export type UserRoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRoleCountOutputType
     */
    select?: UserRoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserRoleCountOutputType without action
   */
  export type UserRoleCountOutputTypeCountMappedUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MappedUserRolesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstname: string | null
    username: string | null
    address: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    phoneNumber: string | null
    dateOfBirth: string | null
    identification: string | null
    employerName: string | null
    jobTitle: string | null
    income: string | null
    bankAccount: string | null
    creditScore: string | null
    socialMedia: string | null
    emergencyContactName: string | null
    emergencyContactNumber: string | null
    preferences: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    userRole: string | null
    password: string | null
    companyId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstname: string | null
    username: string | null
    address: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    phoneNumber: string | null
    dateOfBirth: string | null
    identification: string | null
    employerName: string | null
    jobTitle: string | null
    income: string | null
    bankAccount: string | null
    creditScore: string | null
    socialMedia: string | null
    emergencyContactName: string | null
    emergencyContactNumber: string | null
    preferences: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    userRole: string | null
    password: string | null
    companyId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstname: number
    username: number
    address: number
    city: number
    state: number
    postalCode: number
    phoneNumber: number
    dateOfBirth: number
    identification: number
    employerName: number
    jobTitle: number
    income: number
    bankAccount: number
    creditScore: number
    socialMedia: number
    emergencyContactName: number
    emergencyContactNumber: number
    preferences: number
    createdAt: number
    updatedAt: number
    deleted: number
    userRole: number
    password: number
    companyId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstname?: true
    username?: true
    address?: true
    city?: true
    state?: true
    postalCode?: true
    phoneNumber?: true
    dateOfBirth?: true
    identification?: true
    employerName?: true
    jobTitle?: true
    income?: true
    bankAccount?: true
    creditScore?: true
    socialMedia?: true
    emergencyContactName?: true
    emergencyContactNumber?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    userRole?: true
    password?: true
    companyId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstname?: true
    username?: true
    address?: true
    city?: true
    state?: true
    postalCode?: true
    phoneNumber?: true
    dateOfBirth?: true
    identification?: true
    employerName?: true
    jobTitle?: true
    income?: true
    bankAccount?: true
    creditScore?: true
    socialMedia?: true
    emergencyContactName?: true
    emergencyContactNumber?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    userRole?: true
    password?: true
    companyId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstname?: true
    username?: true
    address?: true
    city?: true
    state?: true
    postalCode?: true
    phoneNumber?: true
    dateOfBirth?: true
    identification?: true
    employerName?: true
    jobTitle?: true
    income?: true
    bankAccount?: true
    creditScore?: true
    socialMedia?: true
    emergencyContactName?: true
    emergencyContactNumber?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    userRole?: true
    password?: true
    companyId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstname: string | null
    username: string | null
    address: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    phoneNumber: string | null
    dateOfBirth: string | null
    identification: string | null
    employerName: string | null
    jobTitle: string | null
    income: string | null
    bankAccount: string | null
    creditScore: string | null
    socialMedia: string | null
    emergencyContactName: string | null
    emergencyContactNumber: string | null
    preferences: string | null
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    userRole: string | null
    password: string | null
    companyId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstname?: boolean
    username?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    postalCode?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    identification?: boolean
    employerName?: boolean
    jobTitle?: boolean
    income?: boolean
    bankAccount?: boolean
    creditScore?: boolean
    socialMedia?: boolean
    emergencyContactName?: boolean
    emergencyContactNumber?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    userRole?: boolean
    password?: boolean
    companyId?: boolean
    loans?: boolean | User$loansArgs<ExtArgs>
    loansTaken?: boolean | User$loansTakenArgs<ExtArgs>
    mappedUserRoles?: boolean | User$mappedUserRolesArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    ResetTokens?: boolean | User$ResetTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstname?: boolean
    username?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    postalCode?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    identification?: boolean
    employerName?: boolean
    jobTitle?: boolean
    income?: boolean
    bankAccount?: boolean
    creditScore?: boolean
    socialMedia?: boolean
    emergencyContactName?: boolean
    emergencyContactNumber?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    userRole?: boolean
    password?: boolean
    companyId?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loans?: boolean | User$loansArgs<ExtArgs>
    loansTaken?: boolean | User$loansTakenArgs<ExtArgs>
    mappedUserRoles?: boolean | User$mappedUserRolesArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    ResetTokens?: boolean | User$ResetTokensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      loans: Prisma.$LoanPayload<ExtArgs>[]
      loansTaken: Prisma.$LoanPayload<ExtArgs>[]
      mappedUserRoles: Prisma.$MappedUserRolesPayload<ExtArgs>[]
      company: Prisma.$CompanyPayload<ExtArgs> | null
      ResetTokens: Prisma.$ResetTokensPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstname: string | null
      username: string | null
      address: string | null
      city: string | null
      state: string | null
      postalCode: string | null
      phoneNumber: string | null
      dateOfBirth: string | null
      identification: string | null
      employerName: string | null
      jobTitle: string | null
      income: string | null
      bankAccount: string | null
      creditScore: string | null
      socialMedia: string | null
      emergencyContactName: string | null
      emergencyContactNumber: string | null
      preferences: string | null
      createdAt: Date
      updatedAt: Date
      deleted: boolean
      userRole: string | null
      password: string | null
      companyId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    loans<T extends User$loansArgs<ExtArgs> = {}>(args?: Subset<T, User$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findMany'> | Null>;

    loansTaken<T extends User$loansTakenArgs<ExtArgs> = {}>(args?: Subset<T, User$loansTakenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findMany'> | Null>;

    mappedUserRoles<T extends User$mappedUserRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$mappedUserRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'findMany'> | Null>;

    company<T extends User$companyArgs<ExtArgs> = {}>(args?: Subset<T, User$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ResetTokens<T extends User$ResetTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$ResetTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly state: FieldRef<"User", 'String'>
    readonly postalCode: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'String'>
    readonly identification: FieldRef<"User", 'String'>
    readonly employerName: FieldRef<"User", 'String'>
    readonly jobTitle: FieldRef<"User", 'String'>
    readonly income: FieldRef<"User", 'String'>
    readonly bankAccount: FieldRef<"User", 'String'>
    readonly creditScore: FieldRef<"User", 'String'>
    readonly socialMedia: FieldRef<"User", 'String'>
    readonly emergencyContactName: FieldRef<"User", 'String'>
    readonly emergencyContactNumber: FieldRef<"User", 'String'>
    readonly preferences: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deleted: FieldRef<"User", 'Boolean'>
    readonly userRole: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly companyId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.loans
   */
  export type User$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * User.loansTaken
   */
  export type User$loansTakenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * User.mappedUserRoles
   */
  export type User$mappedUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    where?: MappedUserRolesWhereInput
    orderBy?: MappedUserRolesOrderByWithRelationInput | MappedUserRolesOrderByWithRelationInput[]
    cursor?: MappedUserRolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MappedUserRolesScalarFieldEnum | MappedUserRolesScalarFieldEnum[]
  }

  /**
   * User.company
   */
  export type User$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.ResetTokens
   */
  export type User$ResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    where?: ResetTokensWhereInput
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    cursor?: ResetTokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResetTokensScalarFieldEnum | ResetTokensScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Loan
   */

  export type AggregateLoan = {
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  export type LoanAvgAggregateOutputType = {
    duration: number | null
    latePaymentPenalty: number | null
  }

  export type LoanSumAggregateOutputType = {
    duration: number | null
    latePaymentPenalty: number | null
  }

  export type LoanMinAggregateOutputType = {
    id: string | null
    lenderId: string | null
    borrowerId: string | null
    amount: string | null
    interestRate: string | null
    duration: number | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    collateral: string | null
    repaymentSchedule: string | null
    latePaymentPenalty: number | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    repaymentScheduleId: string | null
  }

  export type LoanMaxAggregateOutputType = {
    id: string | null
    lenderId: string | null
    borrowerId: string | null
    amount: string | null
    interestRate: string | null
    duration: number | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    collateral: string | null
    repaymentSchedule: string | null
    latePaymentPenalty: number | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    repaymentScheduleId: string | null
  }

  export type LoanCountAggregateOutputType = {
    id: number
    lenderId: number
    borrowerId: number
    amount: number
    interestRate: number
    duration: number
    startDate: number
    endDate: number
    status: number
    collateral: number
    repaymentSchedule: number
    latePaymentPenalty: number
    comments: number
    createdAt: number
    updatedAt: number
    deleted: number
    repaymentScheduleId: number
    _all: number
  }


  export type LoanAvgAggregateInputType = {
    duration?: true
    latePaymentPenalty?: true
  }

  export type LoanSumAggregateInputType = {
    duration?: true
    latePaymentPenalty?: true
  }

  export type LoanMinAggregateInputType = {
    id?: true
    lenderId?: true
    borrowerId?: true
    amount?: true
    interestRate?: true
    duration?: true
    startDate?: true
    endDate?: true
    status?: true
    collateral?: true
    repaymentSchedule?: true
    latePaymentPenalty?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    repaymentScheduleId?: true
  }

  export type LoanMaxAggregateInputType = {
    id?: true
    lenderId?: true
    borrowerId?: true
    amount?: true
    interestRate?: true
    duration?: true
    startDate?: true
    endDate?: true
    status?: true
    collateral?: true
    repaymentSchedule?: true
    latePaymentPenalty?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    repaymentScheduleId?: true
  }

  export type LoanCountAggregateInputType = {
    id?: true
    lenderId?: true
    borrowerId?: true
    amount?: true
    interestRate?: true
    duration?: true
    startDate?: true
    endDate?: true
    status?: true
    collateral?: true
    repaymentSchedule?: true
    latePaymentPenalty?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    repaymentScheduleId?: true
    _all?: true
  }

  export type LoanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loan to aggregate.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loans
    **/
    _count?: true | LoanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanMaxAggregateInputType
  }

  export type GetLoanAggregateType<T extends LoanAggregateArgs> = {
        [P in keyof T & keyof AggregateLoan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoan[P]>
      : GetScalarType<T[P], AggregateLoan[P]>
  }




  export type LoanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithAggregationInput | LoanOrderByWithAggregationInput[]
    by: LoanScalarFieldEnum[] | LoanScalarFieldEnum
    having?: LoanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanCountAggregateInputType | true
    _avg?: LoanAvgAggregateInputType
    _sum?: LoanSumAggregateInputType
    _min?: LoanMinAggregateInputType
    _max?: LoanMaxAggregateInputType
  }

  export type LoanGroupByOutputType = {
    id: string
    lenderId: string
    borrowerId: string
    amount: string | null
    interestRate: string | null
    duration: number | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    collateral: string | null
    repaymentSchedule: string | null
    latePaymentPenalty: number | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    repaymentScheduleId: string
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  type GetLoanGroupByPayload<T extends LoanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanGroupByOutputType[P]>
            : GetScalarType<T[P], LoanGroupByOutputType[P]>
        }
      >
    >


  export type LoanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lenderId?: boolean
    borrowerId?: boolean
    amount?: boolean
    interestRate?: boolean
    duration?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    collateral?: boolean
    repaymentSchedule?: boolean
    latePaymentPenalty?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    repaymentScheduleId?: boolean
    lender?: boolean | UserDefaultArgs<ExtArgs>
    borrower?: boolean | UserDefaultArgs<ExtArgs>
    documents?: boolean | Loan$documentsArgs<ExtArgs>
    repaymentSchedules?: boolean | Loan$repaymentSchedulesArgs<ExtArgs>
    _count?: boolean | LoanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loan"]>

  export type LoanSelectScalar = {
    id?: boolean
    lenderId?: boolean
    borrowerId?: boolean
    amount?: boolean
    interestRate?: boolean
    duration?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    collateral?: boolean
    repaymentSchedule?: boolean
    latePaymentPenalty?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    repaymentScheduleId?: boolean
  }


  export type LoanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lender?: boolean | UserDefaultArgs<ExtArgs>
    borrower?: boolean | UserDefaultArgs<ExtArgs>
    documents?: boolean | Loan$documentsArgs<ExtArgs>
    repaymentSchedules?: boolean | Loan$repaymentSchedulesArgs<ExtArgs>
    _count?: boolean | LoanCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LoanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Loan"
    objects: {
      lender: Prisma.$UserPayload<ExtArgs>
      borrower: Prisma.$UserPayload<ExtArgs>
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      repaymentSchedules: Prisma.$RepaymentSchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lenderId: string
      borrowerId: string
      amount: string | null
      interestRate: string | null
      duration: number | null
      startDate: Date | null
      endDate: Date | null
      status: string | null
      collateral: string | null
      repaymentSchedule: string | null
      latePaymentPenalty: number | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
      deleted: boolean
      repaymentScheduleId: string
    }, ExtArgs["result"]["loan"]>
    composites: {}
  }


  type LoanGetPayload<S extends boolean | null | undefined | LoanDefaultArgs> = $Result.GetResult<Prisma.$LoanPayload, S>

  type LoanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoanCountAggregateInputType | true
    }

  export interface LoanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Loan'], meta: { name: 'Loan' } }
    /**
     * Find zero or one Loan that matches the filter.
     * @param {LoanFindUniqueArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LoanFindUniqueArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Loan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LoanFindUniqueOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Loan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LoanFindFirstArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Loan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Loans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loans
     * const loans = await prisma.loan.findMany()
     * 
     * // Get first 10 Loans
     * const loans = await prisma.loan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanWithIdOnly = await prisma.loan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Loan.
     * @param {LoanCreateArgs} args - Arguments to create a Loan.
     * @example
     * // Create one Loan
     * const Loan = await prisma.loan.create({
     *   data: {
     *     // ... data to create a Loan
     *   }
     * })
     * 
    **/
    create<T extends LoanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LoanCreateArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Loans.
     *     @param {LoanCreateManyArgs} args - Arguments to create many Loans.
     *     @example
     *     // Create many Loans
     *     const loan = await prisma.loan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LoanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Loan.
     * @param {LoanDeleteArgs} args - Arguments to delete one Loan.
     * @example
     * // Delete one Loan
     * const Loan = await prisma.loan.delete({
     *   where: {
     *     // ... filter to delete one Loan
     *   }
     * })
     * 
    **/
    delete<T extends LoanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LoanDeleteArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Loan.
     * @param {LoanUpdateArgs} args - Arguments to update one Loan.
     * @example
     * // Update one Loan
     * const loan = await prisma.loan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LoanUpdateArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Loans.
     * @param {LoanDeleteManyArgs} args - Arguments to filter Loans to delete.
     * @example
     * // Delete a few Loans
     * const { count } = await prisma.loan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loans
     * const loan = await prisma.loan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LoanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Loan.
     * @param {LoanUpsertArgs} args - Arguments to update or create a Loan.
     * @example
     * // Update or create a Loan
     * const loan = await prisma.loan.upsert({
     *   create: {
     *     // ... data to create a Loan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Loan we want to update
     *   }
     * })
    **/
    upsert<T extends LoanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LoanUpsertArgs<ExtArgs>>
    ): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Loans that matches the filter.
     * @param {LoanFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const loan = await prisma.loan.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LoanFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Loan.
     * @param {LoanAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const loan = await prisma.loan.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LoanAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanCountArgs} args - Arguments to filter Loans to count.
     * @example
     * // Count the number of Loans
     * const count = await prisma.loan.count({
     *   where: {
     *     // ... the filter for the Loans we want to count
     *   }
     * })
    **/
    count<T extends LoanCountArgs>(
      args?: Subset<T, LoanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanAggregateArgs>(args: Subset<T, LoanAggregateArgs>): Prisma.PrismaPromise<GetLoanAggregateType<T>>

    /**
     * Group by Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanGroupByArgs['orderBy'] }
        : { orderBy?: LoanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Loan model
   */
  readonly fields: LoanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Loan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    lender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    borrower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    documents<T extends Loan$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Loan$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'findMany'> | Null>;

    repaymentSchedules<T extends Loan$repaymentSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Loan$repaymentSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Loan model
   */ 
  interface LoanFieldRefs {
    readonly id: FieldRef<"Loan", 'String'>
    readonly lenderId: FieldRef<"Loan", 'String'>
    readonly borrowerId: FieldRef<"Loan", 'String'>
    readonly amount: FieldRef<"Loan", 'String'>
    readonly interestRate: FieldRef<"Loan", 'String'>
    readonly duration: FieldRef<"Loan", 'Int'>
    readonly startDate: FieldRef<"Loan", 'DateTime'>
    readonly endDate: FieldRef<"Loan", 'DateTime'>
    readonly status: FieldRef<"Loan", 'String'>
    readonly collateral: FieldRef<"Loan", 'String'>
    readonly repaymentSchedule: FieldRef<"Loan", 'String'>
    readonly latePaymentPenalty: FieldRef<"Loan", 'Float'>
    readonly comments: FieldRef<"Loan", 'String'>
    readonly createdAt: FieldRef<"Loan", 'DateTime'>
    readonly updatedAt: FieldRef<"Loan", 'DateTime'>
    readonly deleted: FieldRef<"Loan", 'Boolean'>
    readonly repaymentScheduleId: FieldRef<"Loan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Loan findUnique
   */
  export type LoanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan findUniqueOrThrow
   */
  export type LoanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan findFirst
   */
  export type LoanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan findFirstOrThrow
   */
  export type LoanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan findMany
   */
  export type LoanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loans to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan create
   */
  export type LoanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The data needed to create a Loan.
     */
    data: XOR<LoanCreateInput, LoanUncheckedCreateInput>
  }

  /**
   * Loan createMany
   */
  export type LoanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Loans.
     */
    data: LoanCreateManyInput | LoanCreateManyInput[]
  }

  /**
   * Loan update
   */
  export type LoanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The data needed to update a Loan.
     */
    data: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
    /**
     * Choose, which Loan to update.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan updateMany
   */
  export type LoanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Loans.
     */
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyInput>
    /**
     * Filter which Loans to update
     */
    where?: LoanWhereInput
  }

  /**
   * Loan upsert
   */
  export type LoanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The filter to search for the Loan to update in case it exists.
     */
    where: LoanWhereUniqueInput
    /**
     * In case the Loan found by the `where` argument doesn't exist, create a new Loan with this data.
     */
    create: XOR<LoanCreateInput, LoanUncheckedCreateInput>
    /**
     * In case the Loan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
  }

  /**
   * Loan delete
   */
  export type LoanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter which Loan to delete.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan deleteMany
   */
  export type LoanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loans to delete
     */
    where?: LoanWhereInput
  }

  /**
   * Loan findRaw
   */
  export type LoanFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Loan aggregateRaw
   */
  export type LoanAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Loan.documents
   */
  export type Loan$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Loan.repaymentSchedules
   */
  export type Loan$repaymentSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    where?: RepaymentScheduleWhereInput
    orderBy?: RepaymentScheduleOrderByWithRelationInput | RepaymentScheduleOrderByWithRelationInput[]
    cursor?: RepaymentScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepaymentScheduleScalarFieldEnum | RepaymentScheduleScalarFieldEnum[]
  }

  /**
   * Loan without action
   */
  export type LoanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    fileType: string | null
    fileName: string | null
    filePath: string | null
    createdAt: Date | null
    updatedAt: Date | null
    loanId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    fileType: string | null
    fileName: string | null
    filePath: string | null
    createdAt: Date | null
    updatedAt: Date | null
    loanId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    fileType: number
    fileName: number
    filePath: number
    createdAt: number
    updatedAt: number
    loanId: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    fileType?: true
    fileName?: true
    filePath?: true
    createdAt?: true
    updatedAt?: true
    loanId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    fileType?: true
    fileName?: true
    filePath?: true
    createdAt?: true
    updatedAt?: true
    loanId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    fileType?: true
    fileName?: true
    filePath?: true
    createdAt?: true
    updatedAt?: true
    loanId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    fileType: string
    fileName: string
    filePath: string
    createdAt: Date
    updatedAt: Date
    loanId: string
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileType?: boolean
    fileName?: boolean
    filePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loanId?: boolean
    loan?: boolean | LoanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    fileType?: boolean
    fileName?: boolean
    filePath?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loanId?: boolean
  }


  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | LoanDefaultArgs<ExtArgs>
  }


  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      loan: Prisma.$LoanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileType: string
      fileName: string
      filePath: string
      createdAt: Date
      updatedAt: Date
      loanId: string
    }, ExtArgs["result"]["document"]>
    composites: {}
  }


  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DocumentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DocumentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DocumentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
    **/
    create<T extends DocumentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Documents.
     *     @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     *     @example
     *     // Create many Documents
     *     const document = await prisma.document.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DocumentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
    **/
    delete<T extends DocumentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DocumentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DocumentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DocumentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
    **/
    upsert<T extends DocumentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>
    ): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * @param {DocumentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const document = await prisma.document.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: DocumentFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Document.
     * @param {DocumentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const document = await prisma.document.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: DocumentAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    loan<T extends LoanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LoanDefaultArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly fileType: FieldRef<"Document", 'String'>
    readonly fileName: FieldRef<"Document", 'String'>
    readonly filePath: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
    readonly loanId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document findRaw
   */
  export type DocumentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Document aggregateRaw
   */
  export type DocumentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    phoneNumber: string | null
    email: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    phoneNumber: string | null
    email: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    address: number
    city: number
    state: number
    postalCode: number
    phoneNumber: number
    email: number
    website: number
    createdAt: number
    updatedAt: number
    deleted: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    city?: true
    state?: true
    postalCode?: true
    phoneNumber?: true
    email?: true
    website?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    city?: true
    state?: true
    postalCode?: true
    phoneNumber?: true
    email?: true
    website?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    city?: true
    state?: true
    postalCode?: true
    phoneNumber?: true
    email?: true
    website?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    address: string | null
    city: string | null
    state: string | null
    postalCode: string | null
    phoneNumber: string | null
    email: string
    website: string | null
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    postalCode?: boolean
    phoneNumber?: boolean
    email?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    users?: boolean | Company$usersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    postalCode?: boolean
    phoneNumber?: boolean
    email?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
  }


  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Company$usersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      city: string | null
      state: string | null
      postalCode: string | null
      phoneNumber: string | null
      email: string
      website: string | null
      createdAt: Date
      updatedAt: Date
      deleted: boolean
    }, ExtArgs["result"]["company"]>
    composites: {}
  }


  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * @param {CompanyFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const company = await prisma.company.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: CompanyFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Company.
     * @param {CompanyAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const company = await prisma.company.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: CompanyAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Company$usersArgs<ExtArgs> = {}>(args?: Subset<T, Company$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly city: FieldRef<"Company", 'String'>
    readonly state: FieldRef<"Company", 'String'>
    readonly postalCode: FieldRef<"Company", 'String'>
    readonly phoneNumber: FieldRef<"Company", 'String'>
    readonly email: FieldRef<"Company", 'String'>
    readonly website: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly deleted: FieldRef<"Company", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company findRaw
   */
  export type CompanyFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Company aggregateRaw
   */
  export type CompanyAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Company.users
   */
  export type Company$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model RepaymentSchedule
   */

  export type AggregateRepaymentSchedule = {
    _count: RepaymentScheduleCountAggregateOutputType | null
    _avg: RepaymentScheduleAvgAggregateOutputType | null
    _sum: RepaymentScheduleSumAggregateOutputType | null
    _min: RepaymentScheduleMinAggregateOutputType | null
    _max: RepaymentScheduleMaxAggregateOutputType | null
  }

  export type RepaymentScheduleAvgAggregateOutputType = {
    amountDue: number | null
    amountPaid: number | null
  }

  export type RepaymentScheduleSumAggregateOutputType = {
    amountDue: number | null
    amountPaid: number | null
  }

  export type RepaymentScheduleMinAggregateOutputType = {
    id: string | null
    loanId: string | null
    paymentDate: Date | null
    amountDue: number | null
    amountPaid: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RepaymentScheduleMaxAggregateOutputType = {
    id: string | null
    loanId: string | null
    paymentDate: Date | null
    amountDue: number | null
    amountPaid: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RepaymentScheduleCountAggregateOutputType = {
    id: number
    loanId: number
    paymentDate: number
    amountDue: number
    amountPaid: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RepaymentScheduleAvgAggregateInputType = {
    amountDue?: true
    amountPaid?: true
  }

  export type RepaymentScheduleSumAggregateInputType = {
    amountDue?: true
    amountPaid?: true
  }

  export type RepaymentScheduleMinAggregateInputType = {
    id?: true
    loanId?: true
    paymentDate?: true
    amountDue?: true
    amountPaid?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RepaymentScheduleMaxAggregateInputType = {
    id?: true
    loanId?: true
    paymentDate?: true
    amountDue?: true
    amountPaid?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RepaymentScheduleCountAggregateInputType = {
    id?: true
    loanId?: true
    paymentDate?: true
    amountDue?: true
    amountPaid?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RepaymentScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepaymentSchedule to aggregate.
     */
    where?: RepaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentSchedules to fetch.
     */
    orderBy?: RepaymentScheduleOrderByWithRelationInput | RepaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RepaymentSchedules
    **/
    _count?: true | RepaymentScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepaymentScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepaymentScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepaymentScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepaymentScheduleMaxAggregateInputType
  }

  export type GetRepaymentScheduleAggregateType<T extends RepaymentScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateRepaymentSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepaymentSchedule[P]>
      : GetScalarType<T[P], AggregateRepaymentSchedule[P]>
  }




  export type RepaymentScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepaymentScheduleWhereInput
    orderBy?: RepaymentScheduleOrderByWithAggregationInput | RepaymentScheduleOrderByWithAggregationInput[]
    by: RepaymentScheduleScalarFieldEnum[] | RepaymentScheduleScalarFieldEnum
    having?: RepaymentScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepaymentScheduleCountAggregateInputType | true
    _avg?: RepaymentScheduleAvgAggregateInputType
    _sum?: RepaymentScheduleSumAggregateInputType
    _min?: RepaymentScheduleMinAggregateInputType
    _max?: RepaymentScheduleMaxAggregateInputType
  }

  export type RepaymentScheduleGroupByOutputType = {
    id: string
    loanId: string
    paymentDate: Date
    amountDue: number
    amountPaid: number
    status: string
    createdAt: Date
    updatedAt: Date
    _count: RepaymentScheduleCountAggregateOutputType | null
    _avg: RepaymentScheduleAvgAggregateOutputType | null
    _sum: RepaymentScheduleSumAggregateOutputType | null
    _min: RepaymentScheduleMinAggregateOutputType | null
    _max: RepaymentScheduleMaxAggregateOutputType | null
  }

  type GetRepaymentScheduleGroupByPayload<T extends RepaymentScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepaymentScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepaymentScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepaymentScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], RepaymentScheduleGroupByOutputType[P]>
        }
      >
    >


  export type RepaymentScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loanId?: boolean
    paymentDate?: boolean
    amountDue?: boolean
    amountPaid?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loan?: boolean | RepaymentSchedule$loanArgs<ExtArgs>
  }, ExtArgs["result"]["repaymentSchedule"]>

  export type RepaymentScheduleSelectScalar = {
    id?: boolean
    loanId?: boolean
    paymentDate?: boolean
    amountDue?: boolean
    amountPaid?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type RepaymentScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loan?: boolean | RepaymentSchedule$loanArgs<ExtArgs>
  }


  export type $RepaymentSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RepaymentSchedule"
    objects: {
      loan: Prisma.$LoanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loanId: string
      paymentDate: Date
      amountDue: number
      amountPaid: number
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["repaymentSchedule"]>
    composites: {}
  }


  type RepaymentScheduleGetPayload<S extends boolean | null | undefined | RepaymentScheduleDefaultArgs> = $Result.GetResult<Prisma.$RepaymentSchedulePayload, S>

  type RepaymentScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RepaymentScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RepaymentScheduleCountAggregateInputType | true
    }

  export interface RepaymentScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RepaymentSchedule'], meta: { name: 'RepaymentSchedule' } }
    /**
     * Find zero or one RepaymentSchedule that matches the filter.
     * @param {RepaymentScheduleFindUniqueArgs} args - Arguments to find a RepaymentSchedule
     * @example
     * // Get one RepaymentSchedule
     * const repaymentSchedule = await prisma.repaymentSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RepaymentScheduleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RepaymentScheduleFindUniqueArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RepaymentSchedule that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RepaymentScheduleFindUniqueOrThrowArgs} args - Arguments to find a RepaymentSchedule
     * @example
     * // Get one RepaymentSchedule
     * const repaymentSchedule = await prisma.repaymentSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RepaymentScheduleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RepaymentScheduleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RepaymentSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleFindFirstArgs} args - Arguments to find a RepaymentSchedule
     * @example
     * // Get one RepaymentSchedule
     * const repaymentSchedule = await prisma.repaymentSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RepaymentScheduleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RepaymentScheduleFindFirstArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RepaymentSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleFindFirstOrThrowArgs} args - Arguments to find a RepaymentSchedule
     * @example
     * // Get one RepaymentSchedule
     * const repaymentSchedule = await prisma.repaymentSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RepaymentScheduleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RepaymentScheduleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RepaymentSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RepaymentSchedules
     * const repaymentSchedules = await prisma.repaymentSchedule.findMany()
     * 
     * // Get first 10 RepaymentSchedules
     * const repaymentSchedules = await prisma.repaymentSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repaymentScheduleWithIdOnly = await prisma.repaymentSchedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RepaymentScheduleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepaymentScheduleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RepaymentSchedule.
     * @param {RepaymentScheduleCreateArgs} args - Arguments to create a RepaymentSchedule.
     * @example
     * // Create one RepaymentSchedule
     * const RepaymentSchedule = await prisma.repaymentSchedule.create({
     *   data: {
     *     // ... data to create a RepaymentSchedule
     *   }
     * })
     * 
    **/
    create<T extends RepaymentScheduleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RepaymentScheduleCreateArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RepaymentSchedules.
     *     @param {RepaymentScheduleCreateManyArgs} args - Arguments to create many RepaymentSchedules.
     *     @example
     *     // Create many RepaymentSchedules
     *     const repaymentSchedule = await prisma.repaymentSchedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RepaymentScheduleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepaymentScheduleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RepaymentSchedule.
     * @param {RepaymentScheduleDeleteArgs} args - Arguments to delete one RepaymentSchedule.
     * @example
     * // Delete one RepaymentSchedule
     * const RepaymentSchedule = await prisma.repaymentSchedule.delete({
     *   where: {
     *     // ... filter to delete one RepaymentSchedule
     *   }
     * })
     * 
    **/
    delete<T extends RepaymentScheduleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RepaymentScheduleDeleteArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RepaymentSchedule.
     * @param {RepaymentScheduleUpdateArgs} args - Arguments to update one RepaymentSchedule.
     * @example
     * // Update one RepaymentSchedule
     * const repaymentSchedule = await prisma.repaymentSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RepaymentScheduleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RepaymentScheduleUpdateArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RepaymentSchedules.
     * @param {RepaymentScheduleDeleteManyArgs} args - Arguments to filter RepaymentSchedules to delete.
     * @example
     * // Delete a few RepaymentSchedules
     * const { count } = await prisma.repaymentSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RepaymentScheduleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepaymentScheduleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RepaymentSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RepaymentSchedules
     * const repaymentSchedule = await prisma.repaymentSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RepaymentScheduleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RepaymentScheduleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RepaymentSchedule.
     * @param {RepaymentScheduleUpsertArgs} args - Arguments to update or create a RepaymentSchedule.
     * @example
     * // Update or create a RepaymentSchedule
     * const repaymentSchedule = await prisma.repaymentSchedule.upsert({
     *   create: {
     *     // ... data to create a RepaymentSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RepaymentSchedule we want to update
     *   }
     * })
    **/
    upsert<T extends RepaymentScheduleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RepaymentScheduleUpsertArgs<ExtArgs>>
    ): Prisma__RepaymentScheduleClient<$Result.GetResult<Prisma.$RepaymentSchedulePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more RepaymentSchedules that matches the filter.
     * @param {RepaymentScheduleFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const repaymentSchedule = await prisma.repaymentSchedule.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: RepaymentScheduleFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a RepaymentSchedule.
     * @param {RepaymentScheduleAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const repaymentSchedule = await prisma.repaymentSchedule.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: RepaymentScheduleAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of RepaymentSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleCountArgs} args - Arguments to filter RepaymentSchedules to count.
     * @example
     * // Count the number of RepaymentSchedules
     * const count = await prisma.repaymentSchedule.count({
     *   where: {
     *     // ... the filter for the RepaymentSchedules we want to count
     *   }
     * })
    **/
    count<T extends RepaymentScheduleCountArgs>(
      args?: Subset<T, RepaymentScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepaymentScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RepaymentSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepaymentScheduleAggregateArgs>(args: Subset<T, RepaymentScheduleAggregateArgs>): Prisma.PrismaPromise<GetRepaymentScheduleAggregateType<T>>

    /**
     * Group by RepaymentSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepaymentScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepaymentScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepaymentScheduleGroupByArgs['orderBy'] }
        : { orderBy?: RepaymentScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepaymentScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepaymentScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RepaymentSchedule model
   */
  readonly fields: RepaymentScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RepaymentSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepaymentScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    loan<T extends RepaymentSchedule$loanArgs<ExtArgs> = {}>(args?: Subset<T, RepaymentSchedule$loanArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RepaymentSchedule model
   */ 
  interface RepaymentScheduleFieldRefs {
    readonly id: FieldRef<"RepaymentSchedule", 'String'>
    readonly loanId: FieldRef<"RepaymentSchedule", 'String'>
    readonly paymentDate: FieldRef<"RepaymentSchedule", 'DateTime'>
    readonly amountDue: FieldRef<"RepaymentSchedule", 'Float'>
    readonly amountPaid: FieldRef<"RepaymentSchedule", 'Float'>
    readonly status: FieldRef<"RepaymentSchedule", 'String'>
    readonly createdAt: FieldRef<"RepaymentSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"RepaymentSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RepaymentSchedule findUnique
   */
  export type RepaymentScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentSchedule to fetch.
     */
    where: RepaymentScheduleWhereUniqueInput
  }

  /**
   * RepaymentSchedule findUniqueOrThrow
   */
  export type RepaymentScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentSchedule to fetch.
     */
    where: RepaymentScheduleWhereUniqueInput
  }

  /**
   * RepaymentSchedule findFirst
   */
  export type RepaymentScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentSchedule to fetch.
     */
    where?: RepaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentSchedules to fetch.
     */
    orderBy?: RepaymentScheduleOrderByWithRelationInput | RepaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepaymentSchedules.
     */
    cursor?: RepaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepaymentSchedules.
     */
    distinct?: RepaymentScheduleScalarFieldEnum | RepaymentScheduleScalarFieldEnum[]
  }

  /**
   * RepaymentSchedule findFirstOrThrow
   */
  export type RepaymentScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentSchedule to fetch.
     */
    where?: RepaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentSchedules to fetch.
     */
    orderBy?: RepaymentScheduleOrderByWithRelationInput | RepaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RepaymentSchedules.
     */
    cursor?: RepaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RepaymentSchedules.
     */
    distinct?: RepaymentScheduleScalarFieldEnum | RepaymentScheduleScalarFieldEnum[]
  }

  /**
   * RepaymentSchedule findMany
   */
  export type RepaymentScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter, which RepaymentSchedules to fetch.
     */
    where?: RepaymentScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RepaymentSchedules to fetch.
     */
    orderBy?: RepaymentScheduleOrderByWithRelationInput | RepaymentScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RepaymentSchedules.
     */
    cursor?: RepaymentScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RepaymentSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RepaymentSchedules.
     */
    skip?: number
    distinct?: RepaymentScheduleScalarFieldEnum | RepaymentScheduleScalarFieldEnum[]
  }

  /**
   * RepaymentSchedule create
   */
  export type RepaymentScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a RepaymentSchedule.
     */
    data: XOR<RepaymentScheduleCreateInput, RepaymentScheduleUncheckedCreateInput>
  }

  /**
   * RepaymentSchedule createMany
   */
  export type RepaymentScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RepaymentSchedules.
     */
    data: RepaymentScheduleCreateManyInput | RepaymentScheduleCreateManyInput[]
  }

  /**
   * RepaymentSchedule update
   */
  export type RepaymentScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a RepaymentSchedule.
     */
    data: XOR<RepaymentScheduleUpdateInput, RepaymentScheduleUncheckedUpdateInput>
    /**
     * Choose, which RepaymentSchedule to update.
     */
    where: RepaymentScheduleWhereUniqueInput
  }

  /**
   * RepaymentSchedule updateMany
   */
  export type RepaymentScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RepaymentSchedules.
     */
    data: XOR<RepaymentScheduleUpdateManyMutationInput, RepaymentScheduleUncheckedUpdateManyInput>
    /**
     * Filter which RepaymentSchedules to update
     */
    where?: RepaymentScheduleWhereInput
  }

  /**
   * RepaymentSchedule upsert
   */
  export type RepaymentScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the RepaymentSchedule to update in case it exists.
     */
    where: RepaymentScheduleWhereUniqueInput
    /**
     * In case the RepaymentSchedule found by the `where` argument doesn't exist, create a new RepaymentSchedule with this data.
     */
    create: XOR<RepaymentScheduleCreateInput, RepaymentScheduleUncheckedCreateInput>
    /**
     * In case the RepaymentSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepaymentScheduleUpdateInput, RepaymentScheduleUncheckedUpdateInput>
  }

  /**
   * RepaymentSchedule delete
   */
  export type RepaymentScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
    /**
     * Filter which RepaymentSchedule to delete.
     */
    where: RepaymentScheduleWhereUniqueInput
  }

  /**
   * RepaymentSchedule deleteMany
   */
  export type RepaymentScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RepaymentSchedules to delete
     */
    where?: RepaymentScheduleWhereInput
  }

  /**
   * RepaymentSchedule findRaw
   */
  export type RepaymentScheduleFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RepaymentSchedule aggregateRaw
   */
  export type RepaymentScheduleAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RepaymentSchedule.loan
   */
  export type RepaymentSchedule$loanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
  }

  /**
   * RepaymentSchedule without action
   */
  export type RepaymentScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepaymentSchedule
     */
    select?: RepaymentScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepaymentScheduleInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: string | null
    name: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: string | null
    name: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    deleted: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: string
    name: $Enums.Role
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    mappedUserRoles?: boolean | UserRole$mappedUserRolesArgs<ExtArgs>
    _count?: boolean | UserRoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
  }


  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mappedUserRoles?: boolean | UserRole$mappedUserRolesArgs<ExtArgs>
    _count?: boolean | UserRoleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      mappedUserRoles: Prisma.$MappedUserRolesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: $Enums.Role
      createdAt: Date
      updatedAt: Date
      deleted: boolean
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }


  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserRoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserRole that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserRoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserRoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
    **/
    create<T extends UserRoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserRoles.
     *     @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     *     @example
     *     // Create many UserRoles
     *     const userRole = await prisma.userRole.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserRoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
    **/
    delete<T extends UserRoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserRoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserRoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserRoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
    **/
    upsert<T extends UserRoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>
    ): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * @param {UserRoleFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userRole = await prisma.userRole.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserRoleFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserRole.
     * @param {UserRoleAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userRole = await prisma.userRole.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserRoleAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    mappedUserRoles<T extends UserRole$mappedUserRolesArgs<ExtArgs> = {}>(args?: Subset<T, UserRole$mappedUserRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserRole model
   */ 
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'String'>
    readonly name: FieldRef<"UserRole", 'Role'>
    readonly createdAt: FieldRef<"UserRole", 'DateTime'>
    readonly updatedAt: FieldRef<"UserRole", 'DateTime'>
    readonly deleted: FieldRef<"UserRole", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole findRaw
   */
  export type UserRoleFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserRole aggregateRaw
   */
  export type UserRoleAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserRole.mappedUserRoles
   */
  export type UserRole$mappedUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    where?: MappedUserRolesWhereInput
    orderBy?: MappedUserRolesOrderByWithRelationInput | MappedUserRolesOrderByWithRelationInput[]
    cursor?: MappedUserRolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MappedUserRolesScalarFieldEnum | MappedUserRolesScalarFieldEnum[]
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model MappedUserRoles
   */

  export type AggregateMappedUserRoles = {
    _count: MappedUserRolesCountAggregateOutputType | null
    _min: MappedUserRolesMinAggregateOutputType | null
    _max: MappedUserRolesMaxAggregateOutputType | null
  }

  export type MappedUserRolesMinAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type MappedUserRolesMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type MappedUserRolesCountAggregateOutputType = {
    id: number
    userId: number
    roleId: number
    createdAt: number
    updatedAt: number
    deleted: number
    _all: number
  }


  export type MappedUserRolesMinAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type MappedUserRolesMaxAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type MappedUserRolesCountAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    _all?: true
  }

  export type MappedUserRolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MappedUserRoles to aggregate.
     */
    where?: MappedUserRolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MappedUserRoles to fetch.
     */
    orderBy?: MappedUserRolesOrderByWithRelationInput | MappedUserRolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MappedUserRolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MappedUserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MappedUserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MappedUserRoles
    **/
    _count?: true | MappedUserRolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MappedUserRolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MappedUserRolesMaxAggregateInputType
  }

  export type GetMappedUserRolesAggregateType<T extends MappedUserRolesAggregateArgs> = {
        [P in keyof T & keyof AggregateMappedUserRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMappedUserRoles[P]>
      : GetScalarType<T[P], AggregateMappedUserRoles[P]>
  }




  export type MappedUserRolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MappedUserRolesWhereInput
    orderBy?: MappedUserRolesOrderByWithAggregationInput | MappedUserRolesOrderByWithAggregationInput[]
    by: MappedUserRolesScalarFieldEnum[] | MappedUserRolesScalarFieldEnum
    having?: MappedUserRolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MappedUserRolesCountAggregateInputType | true
    _min?: MappedUserRolesMinAggregateInputType
    _max?: MappedUserRolesMaxAggregateInputType
  }

  export type MappedUserRolesGroupByOutputType = {
    id: string
    userId: string
    roleId: string
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    _count: MappedUserRolesCountAggregateOutputType | null
    _min: MappedUserRolesMinAggregateOutputType | null
    _max: MappedUserRolesMaxAggregateOutputType | null
  }

  type GetMappedUserRolesGroupByPayload<T extends MappedUserRolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MappedUserRolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MappedUserRolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MappedUserRolesGroupByOutputType[P]>
            : GetScalarType<T[P], MappedUserRolesGroupByOutputType[P]>
        }
      >
    >


  export type MappedUserRolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | UserRoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mappedUserRoles"]>

  export type MappedUserRolesSelectScalar = {
    id?: boolean
    userId?: boolean
    roleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
  }


  export type MappedUserRolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | UserRoleDefaultArgs<ExtArgs>
  }


  export type $MappedUserRolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MappedUserRoles"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$UserRolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      roleId: string
      createdAt: Date
      updatedAt: Date
      deleted: boolean
    }, ExtArgs["result"]["mappedUserRoles"]>
    composites: {}
  }


  type MappedUserRolesGetPayload<S extends boolean | null | undefined | MappedUserRolesDefaultArgs> = $Result.GetResult<Prisma.$MappedUserRolesPayload, S>

  type MappedUserRolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MappedUserRolesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MappedUserRolesCountAggregateInputType | true
    }

  export interface MappedUserRolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MappedUserRoles'], meta: { name: 'MappedUserRoles' } }
    /**
     * Find zero or one MappedUserRoles that matches the filter.
     * @param {MappedUserRolesFindUniqueArgs} args - Arguments to find a MappedUserRoles
     * @example
     * // Get one MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MappedUserRolesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MappedUserRolesFindUniqueArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MappedUserRoles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MappedUserRolesFindUniqueOrThrowArgs} args - Arguments to find a MappedUserRoles
     * @example
     * // Get one MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MappedUserRolesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MappedUserRolesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MappedUserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MappedUserRolesFindFirstArgs} args - Arguments to find a MappedUserRoles
     * @example
     * // Get one MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MappedUserRolesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MappedUserRolesFindFirstArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MappedUserRoles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MappedUserRolesFindFirstOrThrowArgs} args - Arguments to find a MappedUserRoles
     * @example
     * // Get one MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MappedUserRolesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MappedUserRolesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MappedUserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MappedUserRolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.findMany()
     * 
     * // Get first 10 MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mappedUserRolesWithIdOnly = await prisma.mappedUserRoles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MappedUserRolesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MappedUserRolesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MappedUserRoles.
     * @param {MappedUserRolesCreateArgs} args - Arguments to create a MappedUserRoles.
     * @example
     * // Create one MappedUserRoles
     * const MappedUserRoles = await prisma.mappedUserRoles.create({
     *   data: {
     *     // ... data to create a MappedUserRoles
     *   }
     * })
     * 
    **/
    create<T extends MappedUserRolesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MappedUserRolesCreateArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MappedUserRoles.
     *     @param {MappedUserRolesCreateManyArgs} args - Arguments to create many MappedUserRoles.
     *     @example
     *     // Create many MappedUserRoles
     *     const mappedUserRoles = await prisma.mappedUserRoles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MappedUserRolesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MappedUserRolesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MappedUserRoles.
     * @param {MappedUserRolesDeleteArgs} args - Arguments to delete one MappedUserRoles.
     * @example
     * // Delete one MappedUserRoles
     * const MappedUserRoles = await prisma.mappedUserRoles.delete({
     *   where: {
     *     // ... filter to delete one MappedUserRoles
     *   }
     * })
     * 
    **/
    delete<T extends MappedUserRolesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MappedUserRolesDeleteArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MappedUserRoles.
     * @param {MappedUserRolesUpdateArgs} args - Arguments to update one MappedUserRoles.
     * @example
     * // Update one MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MappedUserRolesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MappedUserRolesUpdateArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MappedUserRoles.
     * @param {MappedUserRolesDeleteManyArgs} args - Arguments to filter MappedUserRoles to delete.
     * @example
     * // Delete a few MappedUserRoles
     * const { count } = await prisma.mappedUserRoles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MappedUserRolesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MappedUserRolesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MappedUserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MappedUserRolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MappedUserRolesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MappedUserRolesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MappedUserRoles.
     * @param {MappedUserRolesUpsertArgs} args - Arguments to update or create a MappedUserRoles.
     * @example
     * // Update or create a MappedUserRoles
     * const mappedUserRoles = await prisma.mappedUserRoles.upsert({
     *   create: {
     *     // ... data to create a MappedUserRoles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MappedUserRoles we want to update
     *   }
     * })
    **/
    upsert<T extends MappedUserRolesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MappedUserRolesUpsertArgs<ExtArgs>>
    ): Prisma__MappedUserRolesClient<$Result.GetResult<Prisma.$MappedUserRolesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more MappedUserRoles that matches the filter.
     * @param {MappedUserRolesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const mappedUserRoles = await prisma.mappedUserRoles.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MappedUserRolesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a MappedUserRoles.
     * @param {MappedUserRolesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const mappedUserRoles = await prisma.mappedUserRoles.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MappedUserRolesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of MappedUserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MappedUserRolesCountArgs} args - Arguments to filter MappedUserRoles to count.
     * @example
     * // Count the number of MappedUserRoles
     * const count = await prisma.mappedUserRoles.count({
     *   where: {
     *     // ... the filter for the MappedUserRoles we want to count
     *   }
     * })
    **/
    count<T extends MappedUserRolesCountArgs>(
      args?: Subset<T, MappedUserRolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MappedUserRolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MappedUserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MappedUserRolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MappedUserRolesAggregateArgs>(args: Subset<T, MappedUserRolesAggregateArgs>): Prisma.PrismaPromise<GetMappedUserRolesAggregateType<T>>

    /**
     * Group by MappedUserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MappedUserRolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MappedUserRolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MappedUserRolesGroupByArgs['orderBy'] }
        : { orderBy?: MappedUserRolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MappedUserRolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMappedUserRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MappedUserRoles model
   */
  readonly fields: MappedUserRolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MappedUserRoles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MappedUserRolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    role<T extends UserRoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserRoleDefaultArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MappedUserRoles model
   */ 
  interface MappedUserRolesFieldRefs {
    readonly id: FieldRef<"MappedUserRoles", 'String'>
    readonly userId: FieldRef<"MappedUserRoles", 'String'>
    readonly roleId: FieldRef<"MappedUserRoles", 'String'>
    readonly createdAt: FieldRef<"MappedUserRoles", 'DateTime'>
    readonly updatedAt: FieldRef<"MappedUserRoles", 'DateTime'>
    readonly deleted: FieldRef<"MappedUserRoles", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * MappedUserRoles findUnique
   */
  export type MappedUserRolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * Filter, which MappedUserRoles to fetch.
     */
    where: MappedUserRolesWhereUniqueInput
  }

  /**
   * MappedUserRoles findUniqueOrThrow
   */
  export type MappedUserRolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * Filter, which MappedUserRoles to fetch.
     */
    where: MappedUserRolesWhereUniqueInput
  }

  /**
   * MappedUserRoles findFirst
   */
  export type MappedUserRolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * Filter, which MappedUserRoles to fetch.
     */
    where?: MappedUserRolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MappedUserRoles to fetch.
     */
    orderBy?: MappedUserRolesOrderByWithRelationInput | MappedUserRolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MappedUserRoles.
     */
    cursor?: MappedUserRolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MappedUserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MappedUserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MappedUserRoles.
     */
    distinct?: MappedUserRolesScalarFieldEnum | MappedUserRolesScalarFieldEnum[]
  }

  /**
   * MappedUserRoles findFirstOrThrow
   */
  export type MappedUserRolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * Filter, which MappedUserRoles to fetch.
     */
    where?: MappedUserRolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MappedUserRoles to fetch.
     */
    orderBy?: MappedUserRolesOrderByWithRelationInput | MappedUserRolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MappedUserRoles.
     */
    cursor?: MappedUserRolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MappedUserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MappedUserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MappedUserRoles.
     */
    distinct?: MappedUserRolesScalarFieldEnum | MappedUserRolesScalarFieldEnum[]
  }

  /**
   * MappedUserRoles findMany
   */
  export type MappedUserRolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * Filter, which MappedUserRoles to fetch.
     */
    where?: MappedUserRolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MappedUserRoles to fetch.
     */
    orderBy?: MappedUserRolesOrderByWithRelationInput | MappedUserRolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MappedUserRoles.
     */
    cursor?: MappedUserRolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MappedUserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MappedUserRoles.
     */
    skip?: number
    distinct?: MappedUserRolesScalarFieldEnum | MappedUserRolesScalarFieldEnum[]
  }

  /**
   * MappedUserRoles create
   */
  export type MappedUserRolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * The data needed to create a MappedUserRoles.
     */
    data: XOR<MappedUserRolesCreateInput, MappedUserRolesUncheckedCreateInput>
  }

  /**
   * MappedUserRoles createMany
   */
  export type MappedUserRolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MappedUserRoles.
     */
    data: MappedUserRolesCreateManyInput | MappedUserRolesCreateManyInput[]
  }

  /**
   * MappedUserRoles update
   */
  export type MappedUserRolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * The data needed to update a MappedUserRoles.
     */
    data: XOR<MappedUserRolesUpdateInput, MappedUserRolesUncheckedUpdateInput>
    /**
     * Choose, which MappedUserRoles to update.
     */
    where: MappedUserRolesWhereUniqueInput
  }

  /**
   * MappedUserRoles updateMany
   */
  export type MappedUserRolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MappedUserRoles.
     */
    data: XOR<MappedUserRolesUpdateManyMutationInput, MappedUserRolesUncheckedUpdateManyInput>
    /**
     * Filter which MappedUserRoles to update
     */
    where?: MappedUserRolesWhereInput
  }

  /**
   * MappedUserRoles upsert
   */
  export type MappedUserRolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * The filter to search for the MappedUserRoles to update in case it exists.
     */
    where: MappedUserRolesWhereUniqueInput
    /**
     * In case the MappedUserRoles found by the `where` argument doesn't exist, create a new MappedUserRoles with this data.
     */
    create: XOR<MappedUserRolesCreateInput, MappedUserRolesUncheckedCreateInput>
    /**
     * In case the MappedUserRoles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MappedUserRolesUpdateInput, MappedUserRolesUncheckedUpdateInput>
  }

  /**
   * MappedUserRoles delete
   */
  export type MappedUserRolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
    /**
     * Filter which MappedUserRoles to delete.
     */
    where: MappedUserRolesWhereUniqueInput
  }

  /**
   * MappedUserRoles deleteMany
   */
  export type MappedUserRolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MappedUserRoles to delete
     */
    where?: MappedUserRolesWhereInput
  }

  /**
   * MappedUserRoles findRaw
   */
  export type MappedUserRolesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MappedUserRoles aggregateRaw
   */
  export type MappedUserRolesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MappedUserRoles without action
   */
  export type MappedUserRolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MappedUserRoles
     */
    select?: MappedUserRolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MappedUserRolesInclude<ExtArgs> | null
  }


  /**
   * Model ResetTokens
   */

  export type AggregateResetTokens = {
    _count: ResetTokensCountAggregateOutputType | null
    _min: ResetTokensMinAggregateOutputType | null
    _max: ResetTokensMaxAggregateOutputType | null
  }

  export type ResetTokensMinAggregateOutputType = {
    id: string | null
    resetToken: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type ResetTokensMaxAggregateOutputType = {
    id: string | null
    resetToken: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
  }

  export type ResetTokensCountAggregateOutputType = {
    id: number
    resetToken: number
    userId: number
    createdAt: number
    updatedAt: number
    deleted: number
    _all: number
  }


  export type ResetTokensMinAggregateInputType = {
    id?: true
    resetToken?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type ResetTokensMaxAggregateInputType = {
    id?: true
    resetToken?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
  }

  export type ResetTokensCountAggregateInputType = {
    id?: true
    resetToken?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    _all?: true
  }

  export type ResetTokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResetTokens to aggregate.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResetTokens
    **/
    _count?: true | ResetTokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResetTokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResetTokensMaxAggregateInputType
  }

  export type GetResetTokensAggregateType<T extends ResetTokensAggregateArgs> = {
        [P in keyof T & keyof AggregateResetTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResetTokens[P]>
      : GetScalarType<T[P], AggregateResetTokens[P]>
  }




  export type ResetTokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResetTokensWhereInput
    orderBy?: ResetTokensOrderByWithAggregationInput | ResetTokensOrderByWithAggregationInput[]
    by: ResetTokensScalarFieldEnum[] | ResetTokensScalarFieldEnum
    having?: ResetTokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResetTokensCountAggregateInputType | true
    _min?: ResetTokensMinAggregateInputType
    _max?: ResetTokensMaxAggregateInputType
  }

  export type ResetTokensGroupByOutputType = {
    id: string
    resetToken: string
    userId: string
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    _count: ResetTokensCountAggregateOutputType | null
    _min: ResetTokensMinAggregateOutputType | null
    _max: ResetTokensMaxAggregateOutputType | null
  }

  type GetResetTokensGroupByPayload<T extends ResetTokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResetTokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResetTokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResetTokensGroupByOutputType[P]>
            : GetScalarType<T[P], ResetTokensGroupByOutputType[P]>
        }
      >
    >


  export type ResetTokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resetToken?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resetTokens"]>

  export type ResetTokensSelectScalar = {
    id?: boolean
    resetToken?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
  }


  export type ResetTokensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ResetTokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResetTokens"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      resetToken: string
      userId: string
      createdAt: Date
      updatedAt: Date
      deleted: boolean
    }, ExtArgs["result"]["resetTokens"]>
    composites: {}
  }


  type ResetTokensGetPayload<S extends boolean | null | undefined | ResetTokensDefaultArgs> = $Result.GetResult<Prisma.$ResetTokensPayload, S>

  type ResetTokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResetTokensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResetTokensCountAggregateInputType | true
    }

  export interface ResetTokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResetTokens'], meta: { name: 'ResetTokens' } }
    /**
     * Find zero or one ResetTokens that matches the filter.
     * @param {ResetTokensFindUniqueArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResetTokensFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensFindUniqueArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ResetTokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResetTokensFindUniqueOrThrowArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResetTokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensFindFirstArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResetTokensFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindFirstArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ResetTokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensFindFirstOrThrowArgs} args - Arguments to find a ResetTokens
     * @example
     * // Get one ResetTokens
     * const resetTokens = await prisma.resetTokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResetTokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResetTokens
     * const resetTokens = await prisma.resetTokens.findMany()
     * 
     * // Get first 10 ResetTokens
     * const resetTokens = await prisma.resetTokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resetTokensWithIdOnly = await prisma.resetTokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResetTokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ResetTokens.
     * @param {ResetTokensCreateArgs} args - Arguments to create a ResetTokens.
     * @example
     * // Create one ResetTokens
     * const ResetTokens = await prisma.resetTokens.create({
     *   data: {
     *     // ... data to create a ResetTokens
     *   }
     * })
     * 
    **/
    create<T extends ResetTokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensCreateArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ResetTokens.
     *     @param {ResetTokensCreateManyArgs} args - Arguments to create many ResetTokens.
     *     @example
     *     // Create many ResetTokens
     *     const resetTokens = await prisma.resetTokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResetTokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ResetTokens.
     * @param {ResetTokensDeleteArgs} args - Arguments to delete one ResetTokens.
     * @example
     * // Delete one ResetTokens
     * const ResetTokens = await prisma.resetTokens.delete({
     *   where: {
     *     // ... filter to delete one ResetTokens
     *   }
     * })
     * 
    **/
    delete<T extends ResetTokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensDeleteArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ResetTokens.
     * @param {ResetTokensUpdateArgs} args - Arguments to update one ResetTokens.
     * @example
     * // Update one ResetTokens
     * const resetTokens = await prisma.resetTokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResetTokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensUpdateArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ResetTokens.
     * @param {ResetTokensDeleteManyArgs} args - Arguments to filter ResetTokens to delete.
     * @example
     * // Delete a few ResetTokens
     * const { count } = await prisma.resetTokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResetTokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResetTokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResetTokens
     * const resetTokens = await prisma.resetTokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResetTokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ResetTokens.
     * @param {ResetTokensUpsertArgs} args - Arguments to update or create a ResetTokens.
     * @example
     * // Update or create a ResetTokens
     * const resetTokens = await prisma.resetTokens.upsert({
     *   create: {
     *     // ... data to create a ResetTokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResetTokens we want to update
     *   }
     * })
    **/
    upsert<T extends ResetTokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResetTokensUpsertArgs<ExtArgs>>
    ): Prisma__ResetTokensClient<$Result.GetResult<Prisma.$ResetTokensPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more ResetTokens that matches the filter.
     * @param {ResetTokensFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const resetTokens = await prisma.resetTokens.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ResetTokensFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ResetTokens.
     * @param {ResetTokensAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const resetTokens = await prisma.resetTokens.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ResetTokensAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensCountArgs} args - Arguments to filter ResetTokens to count.
     * @example
     * // Count the number of ResetTokens
     * const count = await prisma.resetTokens.count({
     *   where: {
     *     // ... the filter for the ResetTokens we want to count
     *   }
     * })
    **/
    count<T extends ResetTokensCountArgs>(
      args?: Subset<T, ResetTokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResetTokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResetTokensAggregateArgs>(args: Subset<T, ResetTokensAggregateArgs>): Prisma.PrismaPromise<GetResetTokensAggregateType<T>>

    /**
     * Group by ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResetTokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResetTokensGroupByArgs['orderBy'] }
        : { orderBy?: ResetTokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResetTokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResetTokens model
   */
  readonly fields: ResetTokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResetTokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResetTokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ResetTokens model
   */ 
  interface ResetTokensFieldRefs {
    readonly id: FieldRef<"ResetTokens", 'String'>
    readonly resetToken: FieldRef<"ResetTokens", 'String'>
    readonly userId: FieldRef<"ResetTokens", 'String'>
    readonly createdAt: FieldRef<"ResetTokens", 'DateTime'>
    readonly updatedAt: FieldRef<"ResetTokens", 'DateTime'>
    readonly deleted: FieldRef<"ResetTokens", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ResetTokens findUnique
   */
  export type ResetTokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where: ResetTokensWhereUniqueInput
  }

  /**
   * ResetTokens findUniqueOrThrow
   */
  export type ResetTokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where: ResetTokensWhereUniqueInput
  }

  /**
   * ResetTokens findFirst
   */
  export type ResetTokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResetTokens.
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResetTokens.
     */
    distinct?: ResetTokensScalarFieldEnum | ResetTokensScalarFieldEnum[]
  }

  /**
   * ResetTokens findFirstOrThrow
   */
  export type ResetTokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResetTokens.
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResetTokens.
     */
    distinct?: ResetTokensScalarFieldEnum | ResetTokensScalarFieldEnum[]
  }

  /**
   * ResetTokens findMany
   */
  export type ResetTokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where?: ResetTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokensOrderByWithRelationInput | ResetTokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResetTokens.
     */
    cursor?: ResetTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    distinct?: ResetTokensScalarFieldEnum | ResetTokensScalarFieldEnum[]
  }

  /**
   * ResetTokens create
   */
  export type ResetTokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * The data needed to create a ResetTokens.
     */
    data: XOR<ResetTokensCreateInput, ResetTokensUncheckedCreateInput>
  }

  /**
   * ResetTokens createMany
   */
  export type ResetTokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResetTokens.
     */
    data: ResetTokensCreateManyInput | ResetTokensCreateManyInput[]
  }

  /**
   * ResetTokens update
   */
  export type ResetTokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * The data needed to update a ResetTokens.
     */
    data: XOR<ResetTokensUpdateInput, ResetTokensUncheckedUpdateInput>
    /**
     * Choose, which ResetTokens to update.
     */
    where: ResetTokensWhereUniqueInput
  }

  /**
   * ResetTokens updateMany
   */
  export type ResetTokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResetTokens.
     */
    data: XOR<ResetTokensUpdateManyMutationInput, ResetTokensUncheckedUpdateManyInput>
    /**
     * Filter which ResetTokens to update
     */
    where?: ResetTokensWhereInput
  }

  /**
   * ResetTokens upsert
   */
  export type ResetTokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * The filter to search for the ResetTokens to update in case it exists.
     */
    where: ResetTokensWhereUniqueInput
    /**
     * In case the ResetTokens found by the `where` argument doesn't exist, create a new ResetTokens with this data.
     */
    create: XOR<ResetTokensCreateInput, ResetTokensUncheckedCreateInput>
    /**
     * In case the ResetTokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResetTokensUpdateInput, ResetTokensUncheckedUpdateInput>
  }

  /**
   * ResetTokens delete
   */
  export type ResetTokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
    /**
     * Filter which ResetTokens to delete.
     */
    where: ResetTokensWhereUniqueInput
  }

  /**
   * ResetTokens deleteMany
   */
  export type ResetTokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResetTokens to delete
     */
    where?: ResetTokensWhereInput
  }

  /**
   * ResetTokens findRaw
   */
  export type ResetTokensFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ResetTokens aggregateRaw
   */
  export type ResetTokensAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ResetTokens without action
   */
  export type ResetTokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetTokens
     */
    select?: ResetTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokensInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstname: 'firstname',
    username: 'username',
    address: 'address',
    city: 'city',
    state: 'state',
    postalCode: 'postalCode',
    phoneNumber: 'phoneNumber',
    dateOfBirth: 'dateOfBirth',
    identification: 'identification',
    employerName: 'employerName',
    jobTitle: 'jobTitle',
    income: 'income',
    bankAccount: 'bankAccount',
    creditScore: 'creditScore',
    socialMedia: 'socialMedia',
    emergencyContactName: 'emergencyContactName',
    emergencyContactNumber: 'emergencyContactNumber',
    preferences: 'preferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    userRole: 'userRole',
    password: 'password',
    companyId: 'companyId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LoanScalarFieldEnum: {
    id: 'id',
    lenderId: 'lenderId',
    borrowerId: 'borrowerId',
    amount: 'amount',
    interestRate: 'interestRate',
    duration: 'duration',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    collateral: 'collateral',
    repaymentSchedule: 'repaymentSchedule',
    latePaymentPenalty: 'latePaymentPenalty',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    repaymentScheduleId: 'repaymentScheduleId'
  };

  export type LoanScalarFieldEnum = (typeof LoanScalarFieldEnum)[keyof typeof LoanScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    fileType: 'fileType',
    fileName: 'fileName',
    filePath: 'filePath',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    loanId: 'loanId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    city: 'city',
    state: 'state',
    postalCode: 'postalCode',
    phoneNumber: 'phoneNumber',
    email: 'email',
    website: 'website',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const RepaymentScheduleScalarFieldEnum: {
    id: 'id',
    loanId: 'loanId',
    paymentDate: 'paymentDate',
    amountDue: 'amountDue',
    amountPaid: 'amountPaid',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RepaymentScheduleScalarFieldEnum = (typeof RepaymentScheduleScalarFieldEnum)[keyof typeof RepaymentScheduleScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const MappedUserRolesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    roleId: 'roleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted'
  };

  export type MappedUserRolesScalarFieldEnum = (typeof MappedUserRolesScalarFieldEnum)[keyof typeof MappedUserRolesScalarFieldEnum]


  export const ResetTokensScalarFieldEnum: {
    id: 'id',
    resetToken: 'resetToken',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted'
  };

  export type ResetTokensScalarFieldEnum = (typeof ResetTokensScalarFieldEnum)[keyof typeof ResetTokensScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstname?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    postalCode?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: StringNullableFilter<"User"> | string | null
    identification?: StringNullableFilter<"User"> | string | null
    employerName?: StringNullableFilter<"User"> | string | null
    jobTitle?: StringNullableFilter<"User"> | string | null
    income?: StringNullableFilter<"User"> | string | null
    bankAccount?: StringNullableFilter<"User"> | string | null
    creditScore?: StringNullableFilter<"User"> | string | null
    socialMedia?: StringNullableFilter<"User"> | string | null
    emergencyContactName?: StringNullableFilter<"User"> | string | null
    emergencyContactNumber?: StringNullableFilter<"User"> | string | null
    preferences?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deleted?: BoolFilter<"User"> | boolean
    userRole?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    companyId?: StringNullableFilter<"User"> | string | null
    loans?: LoanListRelationFilter
    loansTaken?: LoanListRelationFilter
    mappedUserRoles?: MappedUserRolesListRelationFilter
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    ResetTokens?: ResetTokensListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    username?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    identification?: SortOrder
    employerName?: SortOrder
    jobTitle?: SortOrder
    income?: SortOrder
    bankAccount?: SortOrder
    creditScore?: SortOrder
    socialMedia?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    userRole?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
    loans?: LoanOrderByRelationAggregateInput
    loansTaken?: LoanOrderByRelationAggregateInput
    mappedUserRoles?: MappedUserRolesOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
    ResetTokens?: ResetTokensOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    postalCode?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: StringNullableFilter<"User"> | string | null
    identification?: StringNullableFilter<"User"> | string | null
    employerName?: StringNullableFilter<"User"> | string | null
    jobTitle?: StringNullableFilter<"User"> | string | null
    income?: StringNullableFilter<"User"> | string | null
    bankAccount?: StringNullableFilter<"User"> | string | null
    creditScore?: StringNullableFilter<"User"> | string | null
    socialMedia?: StringNullableFilter<"User"> | string | null
    emergencyContactName?: StringNullableFilter<"User"> | string | null
    emergencyContactNumber?: StringNullableFilter<"User"> | string | null
    preferences?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deleted?: BoolFilter<"User"> | boolean
    userRole?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    companyId?: StringNullableFilter<"User"> | string | null
    loans?: LoanListRelationFilter
    loansTaken?: LoanListRelationFilter
    mappedUserRoles?: MappedUserRolesListRelationFilter
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    ResetTokens?: ResetTokensListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    username?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    identification?: SortOrder
    employerName?: SortOrder
    jobTitle?: SortOrder
    income?: SortOrder
    bankAccount?: SortOrder
    creditScore?: SortOrder
    socialMedia?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    userRole?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    state?: StringNullableWithAggregatesFilter<"User"> | string | null
    postalCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: StringNullableWithAggregatesFilter<"User"> | string | null
    identification?: StringNullableWithAggregatesFilter<"User"> | string | null
    employerName?: StringNullableWithAggregatesFilter<"User"> | string | null
    jobTitle?: StringNullableWithAggregatesFilter<"User"> | string | null
    income?: StringNullableWithAggregatesFilter<"User"> | string | null
    bankAccount?: StringNullableWithAggregatesFilter<"User"> | string | null
    creditScore?: StringNullableWithAggregatesFilter<"User"> | string | null
    socialMedia?: StringNullableWithAggregatesFilter<"User"> | string | null
    emergencyContactName?: StringNullableWithAggregatesFilter<"User"> | string | null
    emergencyContactNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferences?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deleted?: BoolWithAggregatesFilter<"User"> | boolean
    userRole?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type LoanWhereInput = {
    AND?: LoanWhereInput | LoanWhereInput[]
    OR?: LoanWhereInput[]
    NOT?: LoanWhereInput | LoanWhereInput[]
    id?: StringFilter<"Loan"> | string
    lenderId?: StringFilter<"Loan"> | string
    borrowerId?: StringFilter<"Loan"> | string
    amount?: StringNullableFilter<"Loan"> | string | null
    interestRate?: StringNullableFilter<"Loan"> | string | null
    duration?: IntNullableFilter<"Loan"> | number | null
    startDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    status?: StringNullableFilter<"Loan"> | string | null
    collateral?: StringNullableFilter<"Loan"> | string | null
    repaymentSchedule?: StringNullableFilter<"Loan"> | string | null
    latePaymentPenalty?: FloatNullableFilter<"Loan"> | number | null
    comments?: StringNullableFilter<"Loan"> | string | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    deleted?: BoolFilter<"Loan"> | boolean
    repaymentScheduleId?: StringFilter<"Loan"> | string
    lender?: XOR<UserRelationFilter, UserWhereInput>
    borrower?: XOR<UserRelationFilter, UserWhereInput>
    documents?: DocumentListRelationFilter
    repaymentSchedules?: RepaymentScheduleListRelationFilter
  }

  export type LoanOrderByWithRelationInput = {
    id?: SortOrder
    lenderId?: SortOrder
    borrowerId?: SortOrder
    amount?: SortOrder
    interestRate?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    collateral?: SortOrder
    repaymentSchedule?: SortOrder
    latePaymentPenalty?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    repaymentScheduleId?: SortOrder
    lender?: UserOrderByWithRelationInput
    borrower?: UserOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
    repaymentSchedules?: RepaymentScheduleOrderByRelationAggregateInput
  }

  export type LoanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoanWhereInput | LoanWhereInput[]
    OR?: LoanWhereInput[]
    NOT?: LoanWhereInput | LoanWhereInput[]
    lenderId?: StringFilter<"Loan"> | string
    borrowerId?: StringFilter<"Loan"> | string
    amount?: StringNullableFilter<"Loan"> | string | null
    interestRate?: StringNullableFilter<"Loan"> | string | null
    duration?: IntNullableFilter<"Loan"> | number | null
    startDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    status?: StringNullableFilter<"Loan"> | string | null
    collateral?: StringNullableFilter<"Loan"> | string | null
    repaymentSchedule?: StringNullableFilter<"Loan"> | string | null
    latePaymentPenalty?: FloatNullableFilter<"Loan"> | number | null
    comments?: StringNullableFilter<"Loan"> | string | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    deleted?: BoolFilter<"Loan"> | boolean
    repaymentScheduleId?: StringFilter<"Loan"> | string
    lender?: XOR<UserRelationFilter, UserWhereInput>
    borrower?: XOR<UserRelationFilter, UserWhereInput>
    documents?: DocumentListRelationFilter
    repaymentSchedules?: RepaymentScheduleListRelationFilter
  }, "id">

  export type LoanOrderByWithAggregationInput = {
    id?: SortOrder
    lenderId?: SortOrder
    borrowerId?: SortOrder
    amount?: SortOrder
    interestRate?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    collateral?: SortOrder
    repaymentSchedule?: SortOrder
    latePaymentPenalty?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    repaymentScheduleId?: SortOrder
    _count?: LoanCountOrderByAggregateInput
    _avg?: LoanAvgOrderByAggregateInput
    _max?: LoanMaxOrderByAggregateInput
    _min?: LoanMinOrderByAggregateInput
    _sum?: LoanSumOrderByAggregateInput
  }

  export type LoanScalarWhereWithAggregatesInput = {
    AND?: LoanScalarWhereWithAggregatesInput | LoanScalarWhereWithAggregatesInput[]
    OR?: LoanScalarWhereWithAggregatesInput[]
    NOT?: LoanScalarWhereWithAggregatesInput | LoanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Loan"> | string
    lenderId?: StringWithAggregatesFilter<"Loan"> | string
    borrowerId?: StringWithAggregatesFilter<"Loan"> | string
    amount?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    interestRate?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    duration?: IntNullableWithAggregatesFilter<"Loan"> | number | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Loan"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Loan"> | Date | string | null
    status?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    collateral?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    repaymentSchedule?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    latePaymentPenalty?: FloatNullableWithAggregatesFilter<"Loan"> | number | null
    comments?: StringNullableWithAggregatesFilter<"Loan"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Loan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Loan"> | Date | string
    deleted?: BoolWithAggregatesFilter<"Loan"> | boolean
    repaymentScheduleId?: StringWithAggregatesFilter<"Loan"> | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    fileType?: StringFilter<"Document"> | string
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    loanId?: StringFilter<"Document"> | string
    loan?: XOR<LoanRelationFilter, LoanWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loanId?: SortOrder
    loan?: LoanOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    fileType?: StringFilter<"Document"> | string
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    loanId?: StringFilter<"Document"> | string
    loan?: XOR<LoanRelationFilter, LoanWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loanId?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    fileType?: StringWithAggregatesFilter<"Document"> | string
    fileName?: StringWithAggregatesFilter<"Document"> | string
    filePath?: StringWithAggregatesFilter<"Document"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    loanId?: StringWithAggregatesFilter<"Document"> | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    address?: StringNullableFilter<"Company"> | string | null
    city?: StringNullableFilter<"Company"> | string | null
    state?: StringNullableFilter<"Company"> | string | null
    postalCode?: StringNullableFilter<"Company"> | string | null
    phoneNumber?: StringNullableFilter<"Company"> | string | null
    email?: StringFilter<"Company"> | string
    website?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    deleted?: BoolFilter<"Company"> | boolean
    users?: UserListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    address?: StringNullableFilter<"Company"> | string | null
    city?: StringNullableFilter<"Company"> | string | null
    state?: StringNullableFilter<"Company"> | string | null
    postalCode?: StringNullableFilter<"Company"> | string | null
    phoneNumber?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    deleted?: BoolFilter<"Company"> | boolean
    users?: UserListRelationFilter
  }, "id" | "email">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    city?: StringNullableWithAggregatesFilter<"Company"> | string | null
    state?: StringNullableWithAggregatesFilter<"Company"> | string | null
    postalCode?: StringNullableWithAggregatesFilter<"Company"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Company"> | string | null
    email?: StringWithAggregatesFilter<"Company"> | string
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    deleted?: BoolWithAggregatesFilter<"Company"> | boolean
  }

  export type RepaymentScheduleWhereInput = {
    AND?: RepaymentScheduleWhereInput | RepaymentScheduleWhereInput[]
    OR?: RepaymentScheduleWhereInput[]
    NOT?: RepaymentScheduleWhereInput | RepaymentScheduleWhereInput[]
    id?: StringFilter<"RepaymentSchedule"> | string
    loanId?: StringFilter<"RepaymentSchedule"> | string
    paymentDate?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    amountDue?: FloatFilter<"RepaymentSchedule"> | number
    amountPaid?: FloatFilter<"RepaymentSchedule"> | number
    status?: StringFilter<"RepaymentSchedule"> | string
    createdAt?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    loan?: XOR<LoanNullableRelationFilter, LoanWhereInput> | null
  }

  export type RepaymentScheduleOrderByWithRelationInput = {
    id?: SortOrder
    loanId?: SortOrder
    paymentDate?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loan?: LoanOrderByWithRelationInput
  }

  export type RepaymentScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RepaymentScheduleWhereInput | RepaymentScheduleWhereInput[]
    OR?: RepaymentScheduleWhereInput[]
    NOT?: RepaymentScheduleWhereInput | RepaymentScheduleWhereInput[]
    loanId?: StringFilter<"RepaymentSchedule"> | string
    paymentDate?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    amountDue?: FloatFilter<"RepaymentSchedule"> | number
    amountPaid?: FloatFilter<"RepaymentSchedule"> | number
    status?: StringFilter<"RepaymentSchedule"> | string
    createdAt?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    loan?: XOR<LoanNullableRelationFilter, LoanWhereInput> | null
  }, "id">

  export type RepaymentScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    loanId?: SortOrder
    paymentDate?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RepaymentScheduleCountOrderByAggregateInput
    _avg?: RepaymentScheduleAvgOrderByAggregateInput
    _max?: RepaymentScheduleMaxOrderByAggregateInput
    _min?: RepaymentScheduleMinOrderByAggregateInput
    _sum?: RepaymentScheduleSumOrderByAggregateInput
  }

  export type RepaymentScheduleScalarWhereWithAggregatesInput = {
    AND?: RepaymentScheduleScalarWhereWithAggregatesInput | RepaymentScheduleScalarWhereWithAggregatesInput[]
    OR?: RepaymentScheduleScalarWhereWithAggregatesInput[]
    NOT?: RepaymentScheduleScalarWhereWithAggregatesInput | RepaymentScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RepaymentSchedule"> | string
    loanId?: StringWithAggregatesFilter<"RepaymentSchedule"> | string
    paymentDate?: DateTimeWithAggregatesFilter<"RepaymentSchedule"> | Date | string
    amountDue?: FloatWithAggregatesFilter<"RepaymentSchedule"> | number
    amountPaid?: FloatWithAggregatesFilter<"RepaymentSchedule"> | number
    status?: StringWithAggregatesFilter<"RepaymentSchedule"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RepaymentSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RepaymentSchedule"> | Date | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: StringFilter<"UserRole"> | string
    name?: EnumRoleFilter<"UserRole"> | $Enums.Role
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
    deleted?: BoolFilter<"UserRole"> | boolean
    mappedUserRoles?: MappedUserRolesListRelationFilter
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    mappedUserRoles?: MappedUserRolesOrderByRelationAggregateInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    name?: EnumRoleFilter<"UserRole"> | $Enums.Role
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
    deleted?: BoolFilter<"UserRole"> | boolean
    mappedUserRoles?: MappedUserRolesListRelationFilter
  }, "id">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRole"> | string
    name?: EnumRoleWithAggregatesFilter<"UserRole"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
    deleted?: BoolWithAggregatesFilter<"UserRole"> | boolean
  }

  export type MappedUserRolesWhereInput = {
    AND?: MappedUserRolesWhereInput | MappedUserRolesWhereInput[]
    OR?: MappedUserRolesWhereInput[]
    NOT?: MappedUserRolesWhereInput | MappedUserRolesWhereInput[]
    id?: StringFilter<"MappedUserRoles"> | string
    userId?: StringFilter<"MappedUserRoles"> | string
    roleId?: StringFilter<"MappedUserRoles"> | string
    createdAt?: DateTimeFilter<"MappedUserRoles"> | Date | string
    updatedAt?: DateTimeFilter<"MappedUserRoles"> | Date | string
    deleted?: BoolFilter<"MappedUserRoles"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<UserRoleRelationFilter, UserRoleWhereInput>
  }

  export type MappedUserRolesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: UserRoleOrderByWithRelationInput
  }

  export type MappedUserRolesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MappedUserRolesWhereInput | MappedUserRolesWhereInput[]
    OR?: MappedUserRolesWhereInput[]
    NOT?: MappedUserRolesWhereInput | MappedUserRolesWhereInput[]
    userId?: StringFilter<"MappedUserRoles"> | string
    roleId?: StringFilter<"MappedUserRoles"> | string
    createdAt?: DateTimeFilter<"MappedUserRoles"> | Date | string
    updatedAt?: DateTimeFilter<"MappedUserRoles"> | Date | string
    deleted?: BoolFilter<"MappedUserRoles"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<UserRoleRelationFilter, UserRoleWhereInput>
  }, "id">

  export type MappedUserRolesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    _count?: MappedUserRolesCountOrderByAggregateInput
    _max?: MappedUserRolesMaxOrderByAggregateInput
    _min?: MappedUserRolesMinOrderByAggregateInput
  }

  export type MappedUserRolesScalarWhereWithAggregatesInput = {
    AND?: MappedUserRolesScalarWhereWithAggregatesInput | MappedUserRolesScalarWhereWithAggregatesInput[]
    OR?: MappedUserRolesScalarWhereWithAggregatesInput[]
    NOT?: MappedUserRolesScalarWhereWithAggregatesInput | MappedUserRolesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MappedUserRoles"> | string
    userId?: StringWithAggregatesFilter<"MappedUserRoles"> | string
    roleId?: StringWithAggregatesFilter<"MappedUserRoles"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MappedUserRoles"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MappedUserRoles"> | Date | string
    deleted?: BoolWithAggregatesFilter<"MappedUserRoles"> | boolean
  }

  export type ResetTokensWhereInput = {
    AND?: ResetTokensWhereInput | ResetTokensWhereInput[]
    OR?: ResetTokensWhereInput[]
    NOT?: ResetTokensWhereInput | ResetTokensWhereInput[]
    id?: StringFilter<"ResetTokens"> | string
    resetToken?: StringFilter<"ResetTokens"> | string
    userId?: StringFilter<"ResetTokens"> | string
    createdAt?: DateTimeFilter<"ResetTokens"> | Date | string
    updatedAt?: DateTimeFilter<"ResetTokens"> | Date | string
    deleted?: BoolFilter<"ResetTokens"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ResetTokensOrderByWithRelationInput = {
    id?: SortOrder
    resetToken?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ResetTokensWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResetTokensWhereInput | ResetTokensWhereInput[]
    OR?: ResetTokensWhereInput[]
    NOT?: ResetTokensWhereInput | ResetTokensWhereInput[]
    resetToken?: StringFilter<"ResetTokens"> | string
    userId?: StringFilter<"ResetTokens"> | string
    createdAt?: DateTimeFilter<"ResetTokens"> | Date | string
    updatedAt?: DateTimeFilter<"ResetTokens"> | Date | string
    deleted?: BoolFilter<"ResetTokens"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ResetTokensOrderByWithAggregationInput = {
    id?: SortOrder
    resetToken?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    _count?: ResetTokensCountOrderByAggregateInput
    _max?: ResetTokensMaxOrderByAggregateInput
    _min?: ResetTokensMinOrderByAggregateInput
  }

  export type ResetTokensScalarWhereWithAggregatesInput = {
    AND?: ResetTokensScalarWhereWithAggregatesInput | ResetTokensScalarWhereWithAggregatesInput[]
    OR?: ResetTokensScalarWhereWithAggregatesInput[]
    NOT?: ResetTokensScalarWhereWithAggregatesInput | ResetTokensScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResetTokens"> | string
    resetToken?: StringWithAggregatesFilter<"ResetTokens"> | string
    userId?: StringWithAggregatesFilter<"ResetTokens"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ResetTokens"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ResetTokens"> | Date | string
    deleted?: BoolWithAggregatesFilter<"ResetTokens"> | boolean
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    loans?: LoanCreateNestedManyWithoutLenderInput
    loansTaken?: LoanCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    ResetTokens?: ResetTokensCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    companyId?: string | null
    loans?: LoanUncheckedCreateNestedManyWithoutLenderInput
    loansTaken?: LoanUncheckedCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesUncheckedCreateNestedManyWithoutUserInput
    ResetTokens?: ResetTokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    ResetTokens?: ResetTokensUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUncheckedUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUncheckedUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUncheckedUpdateManyWithoutUserNestedInput
    ResetTokens?: ResetTokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    companyId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoanCreateInput = {
    id?: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    lender: UserCreateNestedOneWithoutLoansInput
    borrower: UserCreateNestedOneWithoutLoansTakenInput
    documents?: DocumentCreateNestedManyWithoutLoanInput
    repaymentSchedules?: RepaymentScheduleCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateInput = {
    id?: string
    lenderId: string
    borrowerId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    documents?: DocumentUncheckedCreateNestedManyWithoutLoanInput
    repaymentSchedules?: RepaymentScheduleUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanUpdateInput = {
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    lender?: UserUpdateOneRequiredWithoutLoansNestedInput
    borrower?: UserUpdateOneRequiredWithoutLoansTakenNestedInput
    documents?: DocumentUpdateManyWithoutLoanNestedInput
    repaymentSchedules?: RepaymentScheduleUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateInput = {
    lenderId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutLoanNestedInput
    repaymentSchedules?: RepaymentScheduleUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanCreateManyInput = {
    id?: string
    lenderId: string
    borrowerId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
  }

  export type LoanUpdateManyMutationInput = {
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
  }

  export type LoanUncheckedUpdateManyInput = {
    lenderId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateInput = {
    id?: string
    fileType: string
    fileName: string
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loan: LoanCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    fileType: string
    fileName: string
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loanId: string
  }

  export type DocumentUpdateInput = {
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    fileType: string
    fileName: string
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loanId: string
  }

  export type DocumentUpdateManyMutationInput = {
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loanId?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    email: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    users?: UserCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    email: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    email: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompanyUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RepaymentScheduleCreateInput = {
    id?: string
    paymentDate: Date | string
    amountDue: number
    amountPaid?: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loan?: LoanCreateNestedOneWithoutRepaymentSchedulesInput
  }

  export type RepaymentScheduleUncheckedCreateInput = {
    id?: string
    loanId: string
    paymentDate: Date | string
    amountDue: number
    amountPaid?: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepaymentScheduleUpdateInput = {
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loan?: LoanUpdateOneWithoutRepaymentSchedulesNestedInput
  }

  export type RepaymentScheduleUncheckedUpdateInput = {
    loanId?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentScheduleCreateManyInput = {
    id?: string
    loanId: string
    paymentDate: Date | string
    amountDue: number
    amountPaid?: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepaymentScheduleUpdateManyMutationInput = {
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentScheduleUncheckedUpdateManyInput = {
    loanId?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateInput = {
    id?: string
    name: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    mappedUserRoles?: MappedUserRolesCreateNestedManyWithoutRoleInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: string
    name: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    mappedUserRoles?: MappedUserRolesUncheckedCreateNestedManyWithoutRoleInput
  }

  export type UserRoleUpdateInput = {
    name?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    mappedUserRoles?: MappedUserRolesUpdateManyWithoutRoleNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    name?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    mappedUserRoles?: MappedUserRolesUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type UserRoleCreateManyInput = {
    id?: string
    name: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type UserRoleUpdateManyMutationInput = {
    name?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUncheckedUpdateManyInput = {
    name?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MappedUserRolesCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    user: UserCreateNestedOneWithoutMappedUserRolesInput
    role: UserRoleCreateNestedOneWithoutMappedUserRolesInput
  }

  export type MappedUserRolesUncheckedCreateInput = {
    id?: string
    userId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type MappedUserRolesUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMappedUserRolesNestedInput
    role?: UserRoleUpdateOneRequiredWithoutMappedUserRolesNestedInput
  }

  export type MappedUserRolesUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MappedUserRolesCreateManyInput = {
    id?: string
    userId: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type MappedUserRolesUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MappedUserRolesUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResetTokensCreateInput = {
    id?: string
    resetToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    user: UserCreateNestedOneWithoutResetTokensInput
  }

  export type ResetTokensUncheckedCreateInput = {
    id?: string
    resetToken: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type ResetTokensUpdateInput = {
    resetToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutResetTokensNestedInput
  }

  export type ResetTokensUncheckedUpdateInput = {
    resetToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResetTokensCreateManyInput = {
    id?: string
    resetToken: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type ResetTokensUpdateManyMutationInput = {
    resetToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResetTokensUncheckedUpdateManyInput = {
    resetToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LoanListRelationFilter = {
    every?: LoanWhereInput
    some?: LoanWhereInput
    none?: LoanWhereInput
  }

  export type MappedUserRolesListRelationFilter = {
    every?: MappedUserRolesWhereInput
    some?: MappedUserRolesWhereInput
    none?: MappedUserRolesWhereInput
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type ResetTokensListRelationFilter = {
    every?: ResetTokensWhereInput
    some?: ResetTokensWhereInput
    none?: ResetTokensWhereInput
  }

  export type LoanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MappedUserRolesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResetTokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    username?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    identification?: SortOrder
    employerName?: SortOrder
    jobTitle?: SortOrder
    income?: SortOrder
    bankAccount?: SortOrder
    creditScore?: SortOrder
    socialMedia?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    userRole?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    username?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    identification?: SortOrder
    employerName?: SortOrder
    jobTitle?: SortOrder
    income?: SortOrder
    bankAccount?: SortOrder
    creditScore?: SortOrder
    socialMedia?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    userRole?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstname?: SortOrder
    username?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    identification?: SortOrder
    employerName?: SortOrder
    jobTitle?: SortOrder
    income?: SortOrder
    bankAccount?: SortOrder
    creditScore?: SortOrder
    socialMedia?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactNumber?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    userRole?: SortOrder
    password?: SortOrder
    companyId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type RepaymentScheduleListRelationFilter = {
    every?: RepaymentScheduleWhereInput
    some?: RepaymentScheduleWhereInput
    none?: RepaymentScheduleWhereInput
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RepaymentScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoanCountOrderByAggregateInput = {
    id?: SortOrder
    lenderId?: SortOrder
    borrowerId?: SortOrder
    amount?: SortOrder
    interestRate?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    collateral?: SortOrder
    repaymentSchedule?: SortOrder
    latePaymentPenalty?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    repaymentScheduleId?: SortOrder
  }

  export type LoanAvgOrderByAggregateInput = {
    duration?: SortOrder
    latePaymentPenalty?: SortOrder
  }

  export type LoanMaxOrderByAggregateInput = {
    id?: SortOrder
    lenderId?: SortOrder
    borrowerId?: SortOrder
    amount?: SortOrder
    interestRate?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    collateral?: SortOrder
    repaymentSchedule?: SortOrder
    latePaymentPenalty?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    repaymentScheduleId?: SortOrder
  }

  export type LoanMinOrderByAggregateInput = {
    id?: SortOrder
    lenderId?: SortOrder
    borrowerId?: SortOrder
    amount?: SortOrder
    interestRate?: SortOrder
    duration?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    collateral?: SortOrder
    repaymentSchedule?: SortOrder
    latePaymentPenalty?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    repaymentScheduleId?: SortOrder
  }

  export type LoanSumOrderByAggregateInput = {
    duration?: SortOrder
    latePaymentPenalty?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type LoanRelationFilter = {
    is?: LoanWhereInput
    isNot?: LoanWhereInput
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loanId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loanId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loanId?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    postalCode?: SortOrder
    phoneNumber?: SortOrder
    email?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LoanNullableRelationFilter = {
    is?: LoanWhereInput | null
    isNot?: LoanWhereInput | null
  }

  export type RepaymentScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    paymentDate?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RepaymentScheduleAvgOrderByAggregateInput = {
    amountDue?: SortOrder
    amountPaid?: SortOrder
  }

  export type RepaymentScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    paymentDate?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RepaymentScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    loanId?: SortOrder
    paymentDate?: SortOrder
    amountDue?: SortOrder
    amountPaid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RepaymentScheduleSumOrderByAggregateInput = {
    amountDue?: SortOrder
    amountPaid?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserRoleRelationFilter = {
    is?: UserRoleWhereInput
    isNot?: UserRoleWhereInput
  }

  export type MappedUserRolesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type MappedUserRolesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type MappedUserRolesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type ResetTokensCountOrderByAggregateInput = {
    id?: SortOrder
    resetToken?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type ResetTokensMaxOrderByAggregateInput = {
    id?: SortOrder
    resetToken?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type ResetTokensMinOrderByAggregateInput = {
    id?: SortOrder
    resetToken?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
  }

  export type LoanCreateNestedManyWithoutLenderInput = {
    create?: XOR<LoanCreateWithoutLenderInput, LoanUncheckedCreateWithoutLenderInput> | LoanCreateWithoutLenderInput[] | LoanUncheckedCreateWithoutLenderInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLenderInput | LoanCreateOrConnectWithoutLenderInput[]
    createMany?: LoanCreateManyLenderInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanCreateNestedManyWithoutBorrowerInput = {
    create?: XOR<LoanCreateWithoutBorrowerInput, LoanUncheckedCreateWithoutBorrowerInput> | LoanCreateWithoutBorrowerInput[] | LoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBorrowerInput | LoanCreateOrConnectWithoutBorrowerInput[]
    createMany?: LoanCreateManyBorrowerInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type MappedUserRolesCreateNestedManyWithoutUserInput = {
    create?: XOR<MappedUserRolesCreateWithoutUserInput, MappedUserRolesUncheckedCreateWithoutUserInput> | MappedUserRolesCreateWithoutUserInput[] | MappedUserRolesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutUserInput | MappedUserRolesCreateOrConnectWithoutUserInput[]
    createMany?: MappedUserRolesCreateManyUserInputEnvelope
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutUsersInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    connect?: CompanyWhereUniqueInput
  }

  export type ResetTokensCreateNestedManyWithoutUserInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput> | ResetTokensCreateWithoutUserInput[] | ResetTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput | ResetTokensCreateOrConnectWithoutUserInput[]
    createMany?: ResetTokensCreateManyUserInputEnvelope
    connect?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutLenderInput = {
    create?: XOR<LoanCreateWithoutLenderInput, LoanUncheckedCreateWithoutLenderInput> | LoanCreateWithoutLenderInput[] | LoanUncheckedCreateWithoutLenderInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLenderInput | LoanCreateOrConnectWithoutLenderInput[]
    createMany?: LoanCreateManyLenderInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutBorrowerInput = {
    create?: XOR<LoanCreateWithoutBorrowerInput, LoanUncheckedCreateWithoutBorrowerInput> | LoanCreateWithoutBorrowerInput[] | LoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBorrowerInput | LoanCreateOrConnectWithoutBorrowerInput[]
    createMany?: LoanCreateManyBorrowerInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type MappedUserRolesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MappedUserRolesCreateWithoutUserInput, MappedUserRolesUncheckedCreateWithoutUserInput> | MappedUserRolesCreateWithoutUserInput[] | MappedUserRolesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutUserInput | MappedUserRolesCreateOrConnectWithoutUserInput[]
    createMany?: MappedUserRolesCreateManyUserInputEnvelope
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
  }

  export type ResetTokensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput> | ResetTokensCreateWithoutUserInput[] | ResetTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput | ResetTokensCreateOrConnectWithoutUserInput[]
    createMany?: ResetTokensCreateManyUserInputEnvelope
    connect?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type LoanUpdateManyWithoutLenderNestedInput = {
    create?: XOR<LoanCreateWithoutLenderInput, LoanUncheckedCreateWithoutLenderInput> | LoanCreateWithoutLenderInput[] | LoanUncheckedCreateWithoutLenderInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLenderInput | LoanCreateOrConnectWithoutLenderInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutLenderInput | LoanUpsertWithWhereUniqueWithoutLenderInput[]
    createMany?: LoanCreateManyLenderInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutLenderInput | LoanUpdateWithWhereUniqueWithoutLenderInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutLenderInput | LoanUpdateManyWithWhereWithoutLenderInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanUpdateManyWithoutBorrowerNestedInput = {
    create?: XOR<LoanCreateWithoutBorrowerInput, LoanUncheckedCreateWithoutBorrowerInput> | LoanCreateWithoutBorrowerInput[] | LoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBorrowerInput | LoanCreateOrConnectWithoutBorrowerInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutBorrowerInput | LoanUpsertWithWhereUniqueWithoutBorrowerInput[]
    createMany?: LoanCreateManyBorrowerInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutBorrowerInput | LoanUpdateWithWhereUniqueWithoutBorrowerInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutBorrowerInput | LoanUpdateManyWithWhereWithoutBorrowerInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type MappedUserRolesUpdateManyWithoutUserNestedInput = {
    create?: XOR<MappedUserRolesCreateWithoutUserInput, MappedUserRolesUncheckedCreateWithoutUserInput> | MappedUserRolesCreateWithoutUserInput[] | MappedUserRolesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutUserInput | MappedUserRolesCreateOrConnectWithoutUserInput[]
    upsert?: MappedUserRolesUpsertWithWhereUniqueWithoutUserInput | MappedUserRolesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MappedUserRolesCreateManyUserInputEnvelope
    set?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    disconnect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    delete?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    update?: MappedUserRolesUpdateWithWhereUniqueWithoutUserInput | MappedUserRolesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MappedUserRolesUpdateManyWithWhereWithoutUserInput | MappedUserRolesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MappedUserRolesScalarWhereInput | MappedUserRolesScalarWhereInput[]
  }

  export type CompanyUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    upsert?: CompanyUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUsersInput, CompanyUpdateWithoutUsersInput>, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type ResetTokensUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput> | ResetTokensCreateWithoutUserInput[] | ResetTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput | ResetTokensCreateOrConnectWithoutUserInput[]
    upsert?: ResetTokensUpsertWithWhereUniqueWithoutUserInput | ResetTokensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResetTokensCreateManyUserInputEnvelope
    set?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    disconnect?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    delete?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    connect?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    update?: ResetTokensUpdateWithWhereUniqueWithoutUserInput | ResetTokensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResetTokensUpdateManyWithWhereWithoutUserInput | ResetTokensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResetTokensScalarWhereInput | ResetTokensScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutLenderNestedInput = {
    create?: XOR<LoanCreateWithoutLenderInput, LoanUncheckedCreateWithoutLenderInput> | LoanCreateWithoutLenderInput[] | LoanUncheckedCreateWithoutLenderInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutLenderInput | LoanCreateOrConnectWithoutLenderInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutLenderInput | LoanUpsertWithWhereUniqueWithoutLenderInput[]
    createMany?: LoanCreateManyLenderInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutLenderInput | LoanUpdateWithWhereUniqueWithoutLenderInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutLenderInput | LoanUpdateManyWithWhereWithoutLenderInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutBorrowerNestedInput = {
    create?: XOR<LoanCreateWithoutBorrowerInput, LoanUncheckedCreateWithoutBorrowerInput> | LoanCreateWithoutBorrowerInput[] | LoanUncheckedCreateWithoutBorrowerInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBorrowerInput | LoanCreateOrConnectWithoutBorrowerInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutBorrowerInput | LoanUpsertWithWhereUniqueWithoutBorrowerInput[]
    createMany?: LoanCreateManyBorrowerInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutBorrowerInput | LoanUpdateWithWhereUniqueWithoutBorrowerInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutBorrowerInput | LoanUpdateManyWithWhereWithoutBorrowerInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type MappedUserRolesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MappedUserRolesCreateWithoutUserInput, MappedUserRolesUncheckedCreateWithoutUserInput> | MappedUserRolesCreateWithoutUserInput[] | MappedUserRolesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutUserInput | MappedUserRolesCreateOrConnectWithoutUserInput[]
    upsert?: MappedUserRolesUpsertWithWhereUniqueWithoutUserInput | MappedUserRolesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MappedUserRolesCreateManyUserInputEnvelope
    set?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    disconnect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    delete?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    update?: MappedUserRolesUpdateWithWhereUniqueWithoutUserInput | MappedUserRolesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MappedUserRolesUpdateManyWithWhereWithoutUserInput | MappedUserRolesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MappedUserRolesScalarWhereInput | MappedUserRolesScalarWhereInput[]
  }

  export type ResetTokensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput> | ResetTokensCreateWithoutUserInput[] | ResetTokensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResetTokensCreateOrConnectWithoutUserInput | ResetTokensCreateOrConnectWithoutUserInput[]
    upsert?: ResetTokensUpsertWithWhereUniqueWithoutUserInput | ResetTokensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResetTokensCreateManyUserInputEnvelope
    set?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    disconnect?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    delete?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    connect?: ResetTokensWhereUniqueInput | ResetTokensWhereUniqueInput[]
    update?: ResetTokensUpdateWithWhereUniqueWithoutUserInput | ResetTokensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResetTokensUpdateManyWithWhereWithoutUserInput | ResetTokensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResetTokensScalarWhereInput | ResetTokensScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLoansInput = {
    create?: XOR<UserCreateWithoutLoansInput, UserUncheckedCreateWithoutLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoansInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLoansTakenInput = {
    create?: XOR<UserCreateWithoutLoansTakenInput, UserUncheckedCreateWithoutLoansTakenInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoansTakenInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutLoanInput = {
    create?: XOR<DocumentCreateWithoutLoanInput, DocumentUncheckedCreateWithoutLoanInput> | DocumentCreateWithoutLoanInput[] | DocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLoanInput | DocumentCreateOrConnectWithoutLoanInput[]
    createMany?: DocumentCreateManyLoanInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type RepaymentScheduleCreateNestedManyWithoutLoanInput = {
    create?: XOR<RepaymentScheduleCreateWithoutLoanInput, RepaymentScheduleUncheckedCreateWithoutLoanInput> | RepaymentScheduleCreateWithoutLoanInput[] | RepaymentScheduleUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleCreateOrConnectWithoutLoanInput | RepaymentScheduleCreateOrConnectWithoutLoanInput[]
    createMany?: RepaymentScheduleCreateManyLoanInputEnvelope
    connect?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutLoanInput = {
    create?: XOR<DocumentCreateWithoutLoanInput, DocumentUncheckedCreateWithoutLoanInput> | DocumentCreateWithoutLoanInput[] | DocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLoanInput | DocumentCreateOrConnectWithoutLoanInput[]
    createMany?: DocumentCreateManyLoanInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type RepaymentScheduleUncheckedCreateNestedManyWithoutLoanInput = {
    create?: XOR<RepaymentScheduleCreateWithoutLoanInput, RepaymentScheduleUncheckedCreateWithoutLoanInput> | RepaymentScheduleCreateWithoutLoanInput[] | RepaymentScheduleUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleCreateOrConnectWithoutLoanInput | RepaymentScheduleCreateOrConnectWithoutLoanInput[]
    createMany?: RepaymentScheduleCreateManyLoanInputEnvelope
    connect?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type UserUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<UserCreateWithoutLoansInput, UserUncheckedCreateWithoutLoansInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoansInput
    upsert?: UserUpsertWithoutLoansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoansInput, UserUpdateWithoutLoansInput>, UserUncheckedUpdateWithoutLoansInput>
  }

  export type UserUpdateOneRequiredWithoutLoansTakenNestedInput = {
    create?: XOR<UserCreateWithoutLoansTakenInput, UserUncheckedCreateWithoutLoansTakenInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoansTakenInput
    upsert?: UserUpsertWithoutLoansTakenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoansTakenInput, UserUpdateWithoutLoansTakenInput>, UserUncheckedUpdateWithoutLoansTakenInput>
  }

  export type DocumentUpdateManyWithoutLoanNestedInput = {
    create?: XOR<DocumentCreateWithoutLoanInput, DocumentUncheckedCreateWithoutLoanInput> | DocumentCreateWithoutLoanInput[] | DocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLoanInput | DocumentCreateOrConnectWithoutLoanInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutLoanInput | DocumentUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: DocumentCreateManyLoanInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutLoanInput | DocumentUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutLoanInput | DocumentUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type RepaymentScheduleUpdateManyWithoutLoanNestedInput = {
    create?: XOR<RepaymentScheduleCreateWithoutLoanInput, RepaymentScheduleUncheckedCreateWithoutLoanInput> | RepaymentScheduleCreateWithoutLoanInput[] | RepaymentScheduleUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleCreateOrConnectWithoutLoanInput | RepaymentScheduleCreateOrConnectWithoutLoanInput[]
    upsert?: RepaymentScheduleUpsertWithWhereUniqueWithoutLoanInput | RepaymentScheduleUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: RepaymentScheduleCreateManyLoanInputEnvelope
    set?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    disconnect?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    delete?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    connect?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    update?: RepaymentScheduleUpdateWithWhereUniqueWithoutLoanInput | RepaymentScheduleUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: RepaymentScheduleUpdateManyWithWhereWithoutLoanInput | RepaymentScheduleUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: RepaymentScheduleScalarWhereInput | RepaymentScheduleScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutLoanNestedInput = {
    create?: XOR<DocumentCreateWithoutLoanInput, DocumentUncheckedCreateWithoutLoanInput> | DocumentCreateWithoutLoanInput[] | DocumentUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutLoanInput | DocumentCreateOrConnectWithoutLoanInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutLoanInput | DocumentUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: DocumentCreateManyLoanInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutLoanInput | DocumentUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutLoanInput | DocumentUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type RepaymentScheduleUncheckedUpdateManyWithoutLoanNestedInput = {
    create?: XOR<RepaymentScheduleCreateWithoutLoanInput, RepaymentScheduleUncheckedCreateWithoutLoanInput> | RepaymentScheduleCreateWithoutLoanInput[] | RepaymentScheduleUncheckedCreateWithoutLoanInput[]
    connectOrCreate?: RepaymentScheduleCreateOrConnectWithoutLoanInput | RepaymentScheduleCreateOrConnectWithoutLoanInput[]
    upsert?: RepaymentScheduleUpsertWithWhereUniqueWithoutLoanInput | RepaymentScheduleUpsertWithWhereUniqueWithoutLoanInput[]
    createMany?: RepaymentScheduleCreateManyLoanInputEnvelope
    set?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    disconnect?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    delete?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    connect?: RepaymentScheduleWhereUniqueInput | RepaymentScheduleWhereUniqueInput[]
    update?: RepaymentScheduleUpdateWithWhereUniqueWithoutLoanInput | RepaymentScheduleUpdateWithWhereUniqueWithoutLoanInput[]
    updateMany?: RepaymentScheduleUpdateManyWithWhereWithoutLoanInput | RepaymentScheduleUpdateManyWithWhereWithoutLoanInput[]
    deleteMany?: RepaymentScheduleScalarWhereInput | RepaymentScheduleScalarWhereInput[]
  }

  export type LoanCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutDocumentsInput
    connect?: LoanWhereUniqueInput
  }

  export type LoanUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: LoanCreateOrConnectWithoutDocumentsInput
    upsert?: LoanUpsertWithoutDocumentsInput
    connect?: LoanWhereUniqueInput
    update?: XOR<XOR<LoanUpdateToOneWithWhereWithoutDocumentsInput, LoanUpdateWithoutDocumentsInput>, LoanUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type LoanCreateNestedOneWithoutRepaymentSchedulesInput = {
    create?: XOR<LoanCreateWithoutRepaymentSchedulesInput, LoanUncheckedCreateWithoutRepaymentSchedulesInput>
    connectOrCreate?: LoanCreateOrConnectWithoutRepaymentSchedulesInput
    connect?: LoanWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LoanUpdateOneWithoutRepaymentSchedulesNestedInput = {
    create?: XOR<LoanCreateWithoutRepaymentSchedulesInput, LoanUncheckedCreateWithoutRepaymentSchedulesInput>
    connectOrCreate?: LoanCreateOrConnectWithoutRepaymentSchedulesInput
    upsert?: LoanUpsertWithoutRepaymentSchedulesInput
    disconnect?: boolean
    delete?: LoanWhereInput | boolean
    connect?: LoanWhereUniqueInput
    update?: XOR<XOR<LoanUpdateToOneWithWhereWithoutRepaymentSchedulesInput, LoanUpdateWithoutRepaymentSchedulesInput>, LoanUncheckedUpdateWithoutRepaymentSchedulesInput>
  }

  export type MappedUserRolesCreateNestedManyWithoutRoleInput = {
    create?: XOR<MappedUserRolesCreateWithoutRoleInput, MappedUserRolesUncheckedCreateWithoutRoleInput> | MappedUserRolesCreateWithoutRoleInput[] | MappedUserRolesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutRoleInput | MappedUserRolesCreateOrConnectWithoutRoleInput[]
    createMany?: MappedUserRolesCreateManyRoleInputEnvelope
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
  }

  export type MappedUserRolesUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<MappedUserRolesCreateWithoutRoleInput, MappedUserRolesUncheckedCreateWithoutRoleInput> | MappedUserRolesCreateWithoutRoleInput[] | MappedUserRolesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutRoleInput | MappedUserRolesCreateOrConnectWithoutRoleInput[]
    createMany?: MappedUserRolesCreateManyRoleInputEnvelope
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type MappedUserRolesUpdateManyWithoutRoleNestedInput = {
    create?: XOR<MappedUserRolesCreateWithoutRoleInput, MappedUserRolesUncheckedCreateWithoutRoleInput> | MappedUserRolesCreateWithoutRoleInput[] | MappedUserRolesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutRoleInput | MappedUserRolesCreateOrConnectWithoutRoleInput[]
    upsert?: MappedUserRolesUpsertWithWhereUniqueWithoutRoleInput | MappedUserRolesUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: MappedUserRolesCreateManyRoleInputEnvelope
    set?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    disconnect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    delete?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    update?: MappedUserRolesUpdateWithWhereUniqueWithoutRoleInput | MappedUserRolesUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: MappedUserRolesUpdateManyWithWhereWithoutRoleInput | MappedUserRolesUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: MappedUserRolesScalarWhereInput | MappedUserRolesScalarWhereInput[]
  }

  export type MappedUserRolesUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<MappedUserRolesCreateWithoutRoleInput, MappedUserRolesUncheckedCreateWithoutRoleInput> | MappedUserRolesCreateWithoutRoleInput[] | MappedUserRolesUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: MappedUserRolesCreateOrConnectWithoutRoleInput | MappedUserRolesCreateOrConnectWithoutRoleInput[]
    upsert?: MappedUserRolesUpsertWithWhereUniqueWithoutRoleInput | MappedUserRolesUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: MappedUserRolesCreateManyRoleInputEnvelope
    set?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    disconnect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    delete?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    connect?: MappedUserRolesWhereUniqueInput | MappedUserRolesWhereUniqueInput[]
    update?: MappedUserRolesUpdateWithWhereUniqueWithoutRoleInput | MappedUserRolesUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: MappedUserRolesUpdateManyWithWhereWithoutRoleInput | MappedUserRolesUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: MappedUserRolesScalarWhereInput | MappedUserRolesScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMappedUserRolesInput = {
    create?: XOR<UserCreateWithoutMappedUserRolesInput, UserUncheckedCreateWithoutMappedUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMappedUserRolesInput
    connect?: UserWhereUniqueInput
  }

  export type UserRoleCreateNestedOneWithoutMappedUserRolesInput = {
    create?: XOR<UserRoleCreateWithoutMappedUserRolesInput, UserRoleUncheckedCreateWithoutMappedUserRolesInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutMappedUserRolesInput
    connect?: UserRoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMappedUserRolesNestedInput = {
    create?: XOR<UserCreateWithoutMappedUserRolesInput, UserUncheckedCreateWithoutMappedUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMappedUserRolesInput
    upsert?: UserUpsertWithoutMappedUserRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMappedUserRolesInput, UserUpdateWithoutMappedUserRolesInput>, UserUncheckedUpdateWithoutMappedUserRolesInput>
  }

  export type UserRoleUpdateOneRequiredWithoutMappedUserRolesNestedInput = {
    create?: XOR<UserRoleCreateWithoutMappedUserRolesInput, UserRoleUncheckedCreateWithoutMappedUserRolesInput>
    connectOrCreate?: UserRoleCreateOrConnectWithoutMappedUserRolesInput
    upsert?: UserRoleUpsertWithoutMappedUserRolesInput
    connect?: UserRoleWhereUniqueInput
    update?: XOR<XOR<UserRoleUpdateToOneWithWhereWithoutMappedUserRolesInput, UserRoleUpdateWithoutMappedUserRolesInput>, UserRoleUncheckedUpdateWithoutMappedUserRolesInput>
  }

  export type UserCreateNestedOneWithoutResetTokensInput = {
    create?: XOR<UserCreateWithoutResetTokensInput, UserUncheckedCreateWithoutResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutResetTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutResetTokensNestedInput = {
    create?: XOR<UserCreateWithoutResetTokensInput, UserUncheckedCreateWithoutResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutResetTokensInput
    upsert?: UserUpsertWithoutResetTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResetTokensInput, UserUpdateWithoutResetTokensInput>, UserUncheckedUpdateWithoutResetTokensInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type LoanCreateWithoutLenderInput = {
    id?: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    borrower: UserCreateNestedOneWithoutLoansTakenInput
    documents?: DocumentCreateNestedManyWithoutLoanInput
    repaymentSchedules?: RepaymentScheduleCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutLenderInput = {
    id?: string
    borrowerId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    documents?: DocumentUncheckedCreateNestedManyWithoutLoanInput
    repaymentSchedules?: RepaymentScheduleUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutLenderInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutLenderInput, LoanUncheckedCreateWithoutLenderInput>
  }

  export type LoanCreateManyLenderInputEnvelope = {
    data: LoanCreateManyLenderInput | LoanCreateManyLenderInput[]
  }

  export type LoanCreateWithoutBorrowerInput = {
    id?: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    lender: UserCreateNestedOneWithoutLoansInput
    documents?: DocumentCreateNestedManyWithoutLoanInput
    repaymentSchedules?: RepaymentScheduleCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutBorrowerInput = {
    id?: string
    lenderId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    documents?: DocumentUncheckedCreateNestedManyWithoutLoanInput
    repaymentSchedules?: RepaymentScheduleUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutBorrowerInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutBorrowerInput, LoanUncheckedCreateWithoutBorrowerInput>
  }

  export type LoanCreateManyBorrowerInputEnvelope = {
    data: LoanCreateManyBorrowerInput | LoanCreateManyBorrowerInput[]
  }

  export type MappedUserRolesCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    role: UserRoleCreateNestedOneWithoutMappedUserRolesInput
  }

  export type MappedUserRolesUncheckedCreateWithoutUserInput = {
    id?: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type MappedUserRolesCreateOrConnectWithoutUserInput = {
    where: MappedUserRolesWhereUniqueInput
    create: XOR<MappedUserRolesCreateWithoutUserInput, MappedUserRolesUncheckedCreateWithoutUserInput>
  }

  export type MappedUserRolesCreateManyUserInputEnvelope = {
    data: MappedUserRolesCreateManyUserInput | MappedUserRolesCreateManyUserInput[]
  }

  export type CompanyCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    email: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type CompanyUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    email: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type CompanyCreateOrConnectWithoutUsersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
  }

  export type ResetTokensCreateWithoutUserInput = {
    id?: string
    resetToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type ResetTokensUncheckedCreateWithoutUserInput = {
    id?: string
    resetToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type ResetTokensCreateOrConnectWithoutUserInput = {
    where: ResetTokensWhereUniqueInput
    create: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
  }

  export type ResetTokensCreateManyUserInputEnvelope = {
    data: ResetTokensCreateManyUserInput | ResetTokensCreateManyUserInput[]
  }

  export type LoanUpsertWithWhereUniqueWithoutLenderInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutLenderInput, LoanUncheckedUpdateWithoutLenderInput>
    create: XOR<LoanCreateWithoutLenderInput, LoanUncheckedCreateWithoutLenderInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutLenderInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutLenderInput, LoanUncheckedUpdateWithoutLenderInput>
  }

  export type LoanUpdateManyWithWhereWithoutLenderInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutLenderInput>
  }

  export type LoanScalarWhereInput = {
    AND?: LoanScalarWhereInput | LoanScalarWhereInput[]
    OR?: LoanScalarWhereInput[]
    NOT?: LoanScalarWhereInput | LoanScalarWhereInput[]
    id?: StringFilter<"Loan"> | string
    lenderId?: StringFilter<"Loan"> | string
    borrowerId?: StringFilter<"Loan"> | string
    amount?: StringNullableFilter<"Loan"> | string | null
    interestRate?: StringNullableFilter<"Loan"> | string | null
    duration?: IntNullableFilter<"Loan"> | number | null
    startDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    status?: StringNullableFilter<"Loan"> | string | null
    collateral?: StringNullableFilter<"Loan"> | string | null
    repaymentSchedule?: StringNullableFilter<"Loan"> | string | null
    latePaymentPenalty?: FloatNullableFilter<"Loan"> | number | null
    comments?: StringNullableFilter<"Loan"> | string | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    deleted?: BoolFilter<"Loan"> | boolean
    repaymentScheduleId?: StringFilter<"Loan"> | string
  }

  export type LoanUpsertWithWhereUniqueWithoutBorrowerInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutBorrowerInput, LoanUncheckedUpdateWithoutBorrowerInput>
    create: XOR<LoanCreateWithoutBorrowerInput, LoanUncheckedCreateWithoutBorrowerInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutBorrowerInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutBorrowerInput, LoanUncheckedUpdateWithoutBorrowerInput>
  }

  export type LoanUpdateManyWithWhereWithoutBorrowerInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutBorrowerInput>
  }

  export type MappedUserRolesUpsertWithWhereUniqueWithoutUserInput = {
    where: MappedUserRolesWhereUniqueInput
    update: XOR<MappedUserRolesUpdateWithoutUserInput, MappedUserRolesUncheckedUpdateWithoutUserInput>
    create: XOR<MappedUserRolesCreateWithoutUserInput, MappedUserRolesUncheckedCreateWithoutUserInput>
  }

  export type MappedUserRolesUpdateWithWhereUniqueWithoutUserInput = {
    where: MappedUserRolesWhereUniqueInput
    data: XOR<MappedUserRolesUpdateWithoutUserInput, MappedUserRolesUncheckedUpdateWithoutUserInput>
  }

  export type MappedUserRolesUpdateManyWithWhereWithoutUserInput = {
    where: MappedUserRolesScalarWhereInput
    data: XOR<MappedUserRolesUpdateManyMutationInput, MappedUserRolesUncheckedUpdateManyWithoutUserInput>
  }

  export type MappedUserRolesScalarWhereInput = {
    AND?: MappedUserRolesScalarWhereInput | MappedUserRolesScalarWhereInput[]
    OR?: MappedUserRolesScalarWhereInput[]
    NOT?: MappedUserRolesScalarWhereInput | MappedUserRolesScalarWhereInput[]
    id?: StringFilter<"MappedUserRoles"> | string
    userId?: StringFilter<"MappedUserRoles"> | string
    roleId?: StringFilter<"MappedUserRoles"> | string
    createdAt?: DateTimeFilter<"MappedUserRoles"> | Date | string
    updatedAt?: DateTimeFilter<"MappedUserRoles"> | Date | string
    deleted?: BoolFilter<"MappedUserRoles"> | boolean
  }

  export type CompanyUpsertWithoutUsersInput = {
    update: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUsersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type CompanyUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompanyUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResetTokensUpsertWithWhereUniqueWithoutUserInput = {
    where: ResetTokensWhereUniqueInput
    update: XOR<ResetTokensUpdateWithoutUserInput, ResetTokensUncheckedUpdateWithoutUserInput>
    create: XOR<ResetTokensCreateWithoutUserInput, ResetTokensUncheckedCreateWithoutUserInput>
  }

  export type ResetTokensUpdateWithWhereUniqueWithoutUserInput = {
    where: ResetTokensWhereUniqueInput
    data: XOR<ResetTokensUpdateWithoutUserInput, ResetTokensUncheckedUpdateWithoutUserInput>
  }

  export type ResetTokensUpdateManyWithWhereWithoutUserInput = {
    where: ResetTokensScalarWhereInput
    data: XOR<ResetTokensUpdateManyMutationInput, ResetTokensUncheckedUpdateManyWithoutUserInput>
  }

  export type ResetTokensScalarWhereInput = {
    AND?: ResetTokensScalarWhereInput | ResetTokensScalarWhereInput[]
    OR?: ResetTokensScalarWhereInput[]
    NOT?: ResetTokensScalarWhereInput | ResetTokensScalarWhereInput[]
    id?: StringFilter<"ResetTokens"> | string
    resetToken?: StringFilter<"ResetTokens"> | string
    userId?: StringFilter<"ResetTokens"> | string
    createdAt?: DateTimeFilter<"ResetTokens"> | Date | string
    updatedAt?: DateTimeFilter<"ResetTokens"> | Date | string
    deleted?: BoolFilter<"ResetTokens"> | boolean
  }

  export type UserCreateWithoutLoansInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    loansTaken?: LoanCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    ResetTokens?: ResetTokensCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLoansInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    companyId?: string | null
    loansTaken?: LoanUncheckedCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesUncheckedCreateNestedManyWithoutUserInput
    ResetTokens?: ResetTokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLoansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoansInput, UserUncheckedCreateWithoutLoansInput>
  }

  export type UserCreateWithoutLoansTakenInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    loans?: LoanCreateNestedManyWithoutLenderInput
    mappedUserRoles?: MappedUserRolesCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    ResetTokens?: ResetTokensCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLoansTakenInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    companyId?: string | null
    loans?: LoanUncheckedCreateNestedManyWithoutLenderInput
    mappedUserRoles?: MappedUserRolesUncheckedCreateNestedManyWithoutUserInput
    ResetTokens?: ResetTokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLoansTakenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoansTakenInput, UserUncheckedCreateWithoutLoansTakenInput>
  }

  export type DocumentCreateWithoutLoanInput = {
    id?: string
    fileType: string
    fileName: string
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUncheckedCreateWithoutLoanInput = {
    id?: string
    fileType: string
    fileName: string
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutLoanInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutLoanInput, DocumentUncheckedCreateWithoutLoanInput>
  }

  export type DocumentCreateManyLoanInputEnvelope = {
    data: DocumentCreateManyLoanInput | DocumentCreateManyLoanInput[]
  }

  export type RepaymentScheduleCreateWithoutLoanInput = {
    id?: string
    paymentDate: Date | string
    amountDue: number
    amountPaid?: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepaymentScheduleUncheckedCreateWithoutLoanInput = {
    id?: string
    paymentDate: Date | string
    amountDue: number
    amountPaid?: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepaymentScheduleCreateOrConnectWithoutLoanInput = {
    where: RepaymentScheduleWhereUniqueInput
    create: XOR<RepaymentScheduleCreateWithoutLoanInput, RepaymentScheduleUncheckedCreateWithoutLoanInput>
  }

  export type RepaymentScheduleCreateManyLoanInputEnvelope = {
    data: RepaymentScheduleCreateManyLoanInput | RepaymentScheduleCreateManyLoanInput[]
  }

  export type UserUpsertWithoutLoansInput = {
    update: XOR<UserUpdateWithoutLoansInput, UserUncheckedUpdateWithoutLoansInput>
    create: XOR<UserCreateWithoutLoansInput, UserUncheckedCreateWithoutLoansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoansInput, UserUncheckedUpdateWithoutLoansInput>
  }

  export type UserUpdateWithoutLoansInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    loansTaken?: LoanUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    ResetTokens?: ResetTokensUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLoansInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    loansTaken?: LoanUncheckedUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUncheckedUpdateManyWithoutUserNestedInput
    ResetTokens?: ResetTokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutLoansTakenInput = {
    update: XOR<UserUpdateWithoutLoansTakenInput, UserUncheckedUpdateWithoutLoansTakenInput>
    create: XOR<UserCreateWithoutLoansTakenInput, UserUncheckedCreateWithoutLoansTakenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoansTakenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoansTakenInput, UserUncheckedUpdateWithoutLoansTakenInput>
  }

  export type UserUpdateWithoutLoansTakenInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUpdateManyWithoutLenderNestedInput
    mappedUserRoles?: MappedUserRolesUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    ResetTokens?: ResetTokensUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLoansTakenInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUncheckedUpdateManyWithoutLenderNestedInput
    mappedUserRoles?: MappedUserRolesUncheckedUpdateManyWithoutUserNestedInput
    ResetTokens?: ResetTokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutLoanInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutLoanInput, DocumentUncheckedUpdateWithoutLoanInput>
    create: XOR<DocumentCreateWithoutLoanInput, DocumentUncheckedCreateWithoutLoanInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutLoanInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutLoanInput, DocumentUncheckedUpdateWithoutLoanInput>
  }

  export type DocumentUpdateManyWithWhereWithoutLoanInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutLoanInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    fileType?: StringFilter<"Document"> | string
    fileName?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    loanId?: StringFilter<"Document"> | string
  }

  export type RepaymentScheduleUpsertWithWhereUniqueWithoutLoanInput = {
    where: RepaymentScheduleWhereUniqueInput
    update: XOR<RepaymentScheduleUpdateWithoutLoanInput, RepaymentScheduleUncheckedUpdateWithoutLoanInput>
    create: XOR<RepaymentScheduleCreateWithoutLoanInput, RepaymentScheduleUncheckedCreateWithoutLoanInput>
  }

  export type RepaymentScheduleUpdateWithWhereUniqueWithoutLoanInput = {
    where: RepaymentScheduleWhereUniqueInput
    data: XOR<RepaymentScheduleUpdateWithoutLoanInput, RepaymentScheduleUncheckedUpdateWithoutLoanInput>
  }

  export type RepaymentScheduleUpdateManyWithWhereWithoutLoanInput = {
    where: RepaymentScheduleScalarWhereInput
    data: XOR<RepaymentScheduleUpdateManyMutationInput, RepaymentScheduleUncheckedUpdateManyWithoutLoanInput>
  }

  export type RepaymentScheduleScalarWhereInput = {
    AND?: RepaymentScheduleScalarWhereInput | RepaymentScheduleScalarWhereInput[]
    OR?: RepaymentScheduleScalarWhereInput[]
    NOT?: RepaymentScheduleScalarWhereInput | RepaymentScheduleScalarWhereInput[]
    id?: StringFilter<"RepaymentSchedule"> | string
    loanId?: StringFilter<"RepaymentSchedule"> | string
    paymentDate?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    amountDue?: FloatFilter<"RepaymentSchedule"> | number
    amountPaid?: FloatFilter<"RepaymentSchedule"> | number
    status?: StringFilter<"RepaymentSchedule"> | string
    createdAt?: DateTimeFilter<"RepaymentSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"RepaymentSchedule"> | Date | string
  }

  export type LoanCreateWithoutDocumentsInput = {
    id?: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    lender: UserCreateNestedOneWithoutLoansInput
    borrower: UserCreateNestedOneWithoutLoansTakenInput
    repaymentSchedules?: RepaymentScheduleCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutDocumentsInput = {
    id?: string
    lenderId: string
    borrowerId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    repaymentSchedules?: RepaymentScheduleUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutDocumentsInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
  }

  export type LoanUpsertWithoutDocumentsInput = {
    update: XOR<LoanUpdateWithoutDocumentsInput, LoanUncheckedUpdateWithoutDocumentsInput>
    create: XOR<LoanCreateWithoutDocumentsInput, LoanUncheckedCreateWithoutDocumentsInput>
    where?: LoanWhereInput
  }

  export type LoanUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: LoanWhereInput
    data: XOR<LoanUpdateWithoutDocumentsInput, LoanUncheckedUpdateWithoutDocumentsInput>
  }

  export type LoanUpdateWithoutDocumentsInput = {
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    lender?: UserUpdateOneRequiredWithoutLoansNestedInput
    borrower?: UserUpdateOneRequiredWithoutLoansTakenNestedInput
    repaymentSchedules?: RepaymentScheduleUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutDocumentsInput = {
    lenderId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    repaymentSchedules?: RepaymentScheduleUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type UserCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    loans?: LoanCreateNestedManyWithoutLenderInput
    loansTaken?: LoanCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesCreateNestedManyWithoutUserInput
    ResetTokens?: ResetTokensCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    loans?: LoanUncheckedCreateNestedManyWithoutLenderInput
    loansTaken?: LoanUncheckedCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesUncheckedCreateNestedManyWithoutUserInput
    ResetTokens?: ResetTokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: UserCreateManyCompanyInput | UserCreateManyCompanyInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstname?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    state?: StringNullableFilter<"User"> | string | null
    postalCode?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: StringNullableFilter<"User"> | string | null
    identification?: StringNullableFilter<"User"> | string | null
    employerName?: StringNullableFilter<"User"> | string | null
    jobTitle?: StringNullableFilter<"User"> | string | null
    income?: StringNullableFilter<"User"> | string | null
    bankAccount?: StringNullableFilter<"User"> | string | null
    creditScore?: StringNullableFilter<"User"> | string | null
    socialMedia?: StringNullableFilter<"User"> | string | null
    emergencyContactName?: StringNullableFilter<"User"> | string | null
    emergencyContactNumber?: StringNullableFilter<"User"> | string | null
    preferences?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deleted?: BoolFilter<"User"> | boolean
    userRole?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    companyId?: StringNullableFilter<"User"> | string | null
  }

  export type LoanCreateWithoutRepaymentSchedulesInput = {
    id?: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    lender: UserCreateNestedOneWithoutLoansInput
    borrower: UserCreateNestedOneWithoutLoansTakenInput
    documents?: DocumentCreateNestedManyWithoutLoanInput
  }

  export type LoanUncheckedCreateWithoutRepaymentSchedulesInput = {
    id?: string
    lenderId: string
    borrowerId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
    documents?: DocumentUncheckedCreateNestedManyWithoutLoanInput
  }

  export type LoanCreateOrConnectWithoutRepaymentSchedulesInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutRepaymentSchedulesInput, LoanUncheckedCreateWithoutRepaymentSchedulesInput>
  }

  export type LoanUpsertWithoutRepaymentSchedulesInput = {
    update: XOR<LoanUpdateWithoutRepaymentSchedulesInput, LoanUncheckedUpdateWithoutRepaymentSchedulesInput>
    create: XOR<LoanCreateWithoutRepaymentSchedulesInput, LoanUncheckedCreateWithoutRepaymentSchedulesInput>
    where?: LoanWhereInput
  }

  export type LoanUpdateToOneWithWhereWithoutRepaymentSchedulesInput = {
    where?: LoanWhereInput
    data: XOR<LoanUpdateWithoutRepaymentSchedulesInput, LoanUncheckedUpdateWithoutRepaymentSchedulesInput>
  }

  export type LoanUpdateWithoutRepaymentSchedulesInput = {
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    lender?: UserUpdateOneRequiredWithoutLoansNestedInput
    borrower?: UserUpdateOneRequiredWithoutLoansTakenNestedInput
    documents?: DocumentUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutRepaymentSchedulesInput = {
    lenderId?: StringFieldUpdateOperationsInput | string
    borrowerId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type MappedUserRolesCreateWithoutRoleInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    user: UserCreateNestedOneWithoutMappedUserRolesInput
  }

  export type MappedUserRolesUncheckedCreateWithoutRoleInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type MappedUserRolesCreateOrConnectWithoutRoleInput = {
    where: MappedUserRolesWhereUniqueInput
    create: XOR<MappedUserRolesCreateWithoutRoleInput, MappedUserRolesUncheckedCreateWithoutRoleInput>
  }

  export type MappedUserRolesCreateManyRoleInputEnvelope = {
    data: MappedUserRolesCreateManyRoleInput | MappedUserRolesCreateManyRoleInput[]
  }

  export type MappedUserRolesUpsertWithWhereUniqueWithoutRoleInput = {
    where: MappedUserRolesWhereUniqueInput
    update: XOR<MappedUserRolesUpdateWithoutRoleInput, MappedUserRolesUncheckedUpdateWithoutRoleInput>
    create: XOR<MappedUserRolesCreateWithoutRoleInput, MappedUserRolesUncheckedCreateWithoutRoleInput>
  }

  export type MappedUserRolesUpdateWithWhereUniqueWithoutRoleInput = {
    where: MappedUserRolesWhereUniqueInput
    data: XOR<MappedUserRolesUpdateWithoutRoleInput, MappedUserRolesUncheckedUpdateWithoutRoleInput>
  }

  export type MappedUserRolesUpdateManyWithWhereWithoutRoleInput = {
    where: MappedUserRolesScalarWhereInput
    data: XOR<MappedUserRolesUpdateManyMutationInput, MappedUserRolesUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserCreateWithoutMappedUserRolesInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    loans?: LoanCreateNestedManyWithoutLenderInput
    loansTaken?: LoanCreateNestedManyWithoutBorrowerInput
    company?: CompanyCreateNestedOneWithoutUsersInput
    ResetTokens?: ResetTokensCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMappedUserRolesInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    companyId?: string | null
    loans?: LoanUncheckedCreateNestedManyWithoutLenderInput
    loansTaken?: LoanUncheckedCreateNestedManyWithoutBorrowerInput
    ResetTokens?: ResetTokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMappedUserRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMappedUserRolesInput, UserUncheckedCreateWithoutMappedUserRolesInput>
  }

  export type UserRoleCreateWithoutMappedUserRolesInput = {
    id?: string
    name: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type UserRoleUncheckedCreateWithoutMappedUserRolesInput = {
    id?: string
    name: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type UserRoleCreateOrConnectWithoutMappedUserRolesInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutMappedUserRolesInput, UserRoleUncheckedCreateWithoutMappedUserRolesInput>
  }

  export type UserUpsertWithoutMappedUserRolesInput = {
    update: XOR<UserUpdateWithoutMappedUserRolesInput, UserUncheckedUpdateWithoutMappedUserRolesInput>
    create: XOR<UserCreateWithoutMappedUserRolesInput, UserUncheckedCreateWithoutMappedUserRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMappedUserRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMappedUserRolesInput, UserUncheckedUpdateWithoutMappedUserRolesInput>
  }

  export type UserUpdateWithoutMappedUserRolesInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUpdateManyWithoutBorrowerNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
    ResetTokens?: ResetTokensUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMappedUserRolesInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUncheckedUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUncheckedUpdateManyWithoutBorrowerNestedInput
    ResetTokens?: ResetTokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserRoleUpsertWithoutMappedUserRolesInput = {
    update: XOR<UserRoleUpdateWithoutMappedUserRolesInput, UserRoleUncheckedUpdateWithoutMappedUserRolesInput>
    create: XOR<UserRoleCreateWithoutMappedUserRolesInput, UserRoleUncheckedCreateWithoutMappedUserRolesInput>
    where?: UserRoleWhereInput
  }

  export type UserRoleUpdateToOneWithWhereWithoutMappedUserRolesInput = {
    where?: UserRoleWhereInput
    data: XOR<UserRoleUpdateWithoutMappedUserRolesInput, UserRoleUncheckedUpdateWithoutMappedUserRolesInput>
  }

  export type UserRoleUpdateWithoutMappedUserRolesInput = {
    name?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUncheckedUpdateWithoutMappedUserRolesInput = {
    name?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateWithoutResetTokensInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    loans?: LoanCreateNestedManyWithoutLenderInput
    loansTaken?: LoanCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutResetTokensInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
    companyId?: string | null
    loans?: LoanUncheckedCreateNestedManyWithoutLenderInput
    loansTaken?: LoanUncheckedCreateNestedManyWithoutBorrowerInput
    mappedUserRoles?: MappedUserRolesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResetTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResetTokensInput, UserUncheckedCreateWithoutResetTokensInput>
  }

  export type UserUpsertWithoutResetTokensInput = {
    update: XOR<UserUpdateWithoutResetTokensInput, UserUncheckedUpdateWithoutResetTokensInput>
    create: XOR<UserCreateWithoutResetTokensInput, UserUncheckedCreateWithoutResetTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResetTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResetTokensInput, UserUncheckedUpdateWithoutResetTokensInput>
  }

  export type UserUpdateWithoutResetTokensInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutResetTokensInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUncheckedUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUncheckedUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LoanCreateManyLenderInput = {
    id?: string
    borrowerId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
  }

  export type LoanCreateManyBorrowerInput = {
    id?: string
    lenderId: string
    amount?: string | null
    interestRate?: string | null
    duration?: number | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    status?: string | null
    collateral?: string | null
    repaymentSchedule?: string | null
    latePaymentPenalty?: number | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    repaymentScheduleId: string
  }

  export type MappedUserRolesCreateManyUserInput = {
    id?: string
    roleId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type ResetTokensCreateManyUserInput = {
    id?: string
    resetToken: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type LoanUpdateWithoutLenderInput = {
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    borrower?: UserUpdateOneRequiredWithoutLoansTakenNestedInput
    documents?: DocumentUpdateManyWithoutLoanNestedInput
    repaymentSchedules?: RepaymentScheduleUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutLenderInput = {
    borrowerId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutLoanNestedInput
    repaymentSchedules?: RepaymentScheduleUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutLenderInput = {
    borrowerId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
  }

  export type LoanUpdateWithoutBorrowerInput = {
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    lender?: UserUpdateOneRequiredWithoutLoansNestedInput
    documents?: DocumentUpdateManyWithoutLoanNestedInput
    repaymentSchedules?: RepaymentScheduleUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateWithoutBorrowerInput = {
    lenderId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutLoanNestedInput
    repaymentSchedules?: RepaymentScheduleUncheckedUpdateManyWithoutLoanNestedInput
  }

  export type LoanUncheckedUpdateManyWithoutBorrowerInput = {
    lenderId?: StringFieldUpdateOperationsInput | string
    amount?: NullableStringFieldUpdateOperationsInput | string | null
    interestRate?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    collateral?: NullableStringFieldUpdateOperationsInput | string | null
    repaymentSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    latePaymentPenalty?: NullableFloatFieldUpdateOperationsInput | number | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    repaymentScheduleId?: StringFieldUpdateOperationsInput | string
  }

  export type MappedUserRolesUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    role?: UserRoleUpdateOneRequiredWithoutMappedUserRolesNestedInput
  }

  export type MappedUserRolesUncheckedUpdateWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MappedUserRolesUncheckedUpdateManyWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResetTokensUpdateWithoutUserInput = {
    resetToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResetTokensUncheckedUpdateWithoutUserInput = {
    resetToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResetTokensUncheckedUpdateManyWithoutUserInput = {
    resetToken?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DocumentCreateManyLoanInput = {
    id?: string
    fileType: string
    fileName: string
    filePath: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepaymentScheduleCreateManyLoanInput = {
    id?: string
    paymentDate: Date | string
    amountDue: number
    amountPaid?: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateWithoutLoanInput = {
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateWithoutLoanInput = {
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutLoanInput = {
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentScheduleUpdateWithoutLoanInput = {
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentScheduleUncheckedUpdateWithoutLoanInput = {
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepaymentScheduleUncheckedUpdateManyWithoutLoanInput = {
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountDue?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyCompanyInput = {
    id?: string
    email: string
    firstname?: string | null
    username?: string | null
    address?: string | null
    city?: string | null
    state?: string | null
    postalCode?: string | null
    phoneNumber?: string | null
    dateOfBirth?: string | null
    identification?: string | null
    employerName?: string | null
    jobTitle?: string | null
    income?: string | null
    bankAccount?: string | null
    creditScore?: string | null
    socialMedia?: string | null
    emergencyContactName?: string | null
    emergencyContactNumber?: string | null
    preferences?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    userRole?: string | null
    password?: string | null
  }

  export type UserUpdateWithoutCompanyInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUpdateManyWithoutUserNestedInput
    ResetTokens?: ResetTokensUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    loans?: LoanUncheckedUpdateManyWithoutLenderNestedInput
    loansTaken?: LoanUncheckedUpdateManyWithoutBorrowerNestedInput
    mappedUserRoles?: MappedUserRolesUncheckedUpdateManyWithoutUserNestedInput
    ResetTokens?: ResetTokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCompanyInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableStringFieldUpdateOperationsInput | string | null
    identification?: NullableStringFieldUpdateOperationsInput | string | null
    employerName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    creditScore?: NullableStringFieldUpdateOperationsInput | string | null
    socialMedia?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    userRole?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MappedUserRolesCreateManyRoleInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
  }

  export type MappedUserRolesUpdateWithoutRoleInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMappedUserRolesNestedInput
  }

  export type MappedUserRolesUncheckedUpdateWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MappedUserRolesUncheckedUpdateManyWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoanCountOutputTypeDefaultArgs instead
     */
    export type LoanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleCountOutputTypeDefaultArgs instead
     */
    export type UserRoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoanDefaultArgs instead
     */
    export type LoanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RepaymentScheduleDefaultArgs instead
     */
    export type RepaymentScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RepaymentScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleDefaultArgs instead
     */
    export type UserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MappedUserRolesDefaultArgs instead
     */
    export type MappedUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MappedUserRolesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResetTokensDefaultArgs instead
     */
    export type ResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResetTokensDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}